class'cTable'function cTable.values(a)local b=table.values(a)table.sort(b)return b end;function cTable.last(a)return a[#a]end;function cTable.merge(c,d)for e,f in pairs(d)do if type(f)=="table"then if type(c[e]or false)=="table"then cTable.merge(c[e]or{},d[e]or{})else c[e]=f end else c[e]=f end end;return c end;function cTable.compact(a)if table.is_empty(a)then return a end;local g=table.keys(a)table.sort(g)for e,f in ipairs(g)do a[e]=a[f]end;local h,i=cTable.bounds(a)for e=i,#g+1,-1 do a[e]=nil end end;function cTable.compare(c,d)return table.concat(c,",")==table.concat(d,",")end;function cTable.match_key(a,j)local b=table.create()for k,f in pairs(a)do b:insert(f[j])end;return b end;function cTable.nearest(a,l)TRACE("cTable.nearest(t,val)",#a,l)local m=table.values(a)table.sort(m)local n,j;for e,f in ipairs(m)do if f==l then return f,e end;if f>l then if not n then return f,e end;local o=math.abs(n-l)local p=math.abs(f-l)if math.min(o,p)==o then return n,e else return f,e end end;n=f;j=e end;return n,j end;function cTable.next(a,l)TRACE("cTable.next(t,val)",#a,l)local m=table.values(a)table.sort(m)local k,q=cTable.nearest(m,l)if q then return m[q+1]end end;function cTable.previous(a,l)TRACE("cTable.previous(t,val)",#a,l)local m=table.values(a)table.sort(m)local k,q=cTable.nearest(m,l)if q then return m[q-1]end end;function cTable.expand(a,r,s,t,u)if not a[r]then a[r]={}end;if s then a=cTable.expand(a[r],s,t,u)end;return a end;function cTable.bounds(a)local v,w=nil,nil;for e,f in ipairs(table.keys(a))do if type(f)=="number"then if not w then w=f end;if not v then v=f end;w=math.max(w,f)v=math.min(v,f)end end;return v,w end;function cTable.is_indexed(a)local x=0;for k in pairs(a)do x=x+1;if a[x]==nil then return false end end;return true end