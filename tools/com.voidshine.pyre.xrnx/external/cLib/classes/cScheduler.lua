class'cScheduler'function cScheduler:__init()TRACE("cScheduler:__init()")self.tasks=table.create()end;function cScheduler:on_idle()for a,b in ripairs(self.tasks)do if b.time<=os.clock()then self:_execute_task(b)self.tasks:remove(a)end end end;function cScheduler:add_task(c,d,e,...)TRACE("cScheduler:add_task()",c,d,e)local b=cScheduledTask(c,d,e,arg)self.tasks:insert(b)local f=renoise.tool().app_idle_observable;local g=cScheduler.on_idle;if not f:has_notifier(self,g)then f:add_notifier(self,g)end;return b end;function cScheduler:remove_task(c)TRACE("cScheduler:remove_task()",c)for a,b in ripairs(self.tasks)do if c==b then self.tasks:remove(a)return end end;if#self.tasks==0 then local f=renoise.tool().app_idle_observable;local g=cScheduler.on_idle;if f:has_notifier(self,g)then f:remove_notifier(self,g)end end end;function cScheduler:_execute_task(b)TRACE("cScheduler:_execute_task",b)if b.ref then b.func(b.ref,unpack(b.args))else b.func(unpack(b.args))end end;class'cScheduledTask'function cScheduledTask:__init(c,d,e,h)TRACE("cScheduledTask:__init",c,d,e,h)self.time=os.clock()+e;self.args=h;self.ref=c;self.func=d end;function cScheduledTask:__eq(i)return rawequal(self,i)end