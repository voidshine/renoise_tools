require(_clibroot.."cString")class'cFilesystem'cFilesystem.FILETYPE={FOLDER=1,FILE=2}function cFilesystem.get_userdata_folder()TRACE("cFilesystem.get_userdata_folder()")local a=os.platform()=="WINDOWS"and"\\Scripts\\Libraries\\?.lua"or"/Scripts/Libraries/?.lua"local b=string.gmatch(package.path,";([^;]+)")for c in b do if string.sub(c,-24)==a then if string.find(c,"Users")or string.find(c,"Resources")or string.find(c,"/usr/")then return cFilesystem.unixslashes(string.sub(c,0,#c-#a)).."/"end end end end;function cFilesystem.get_resource_folder()TRACE("cFilesystem.get_resource_folder()")local a=os.platform()=="WINDOWS"and"\\Scripts\\Libraries\\?.lua"or"/Scripts/Libraries/?.lua"local b=string.gmatch(package.path,";([^;]+)")for c in b do if string.sub(c,-24)==a then if string.find(c,"Resources")then return cFilesystem.unixslashes(string.sub(c,0,#c-#a)).."/"end end end end;function cFilesystem.get_path_parts(d)TRACE("cFilesystem.get_path_parts()")cFilesystem.assert_string(d,"file_path")local e="(.-)([^\\/]-%.?([^%.\\/]*))$"local f,g,h=string.match(d,e)if g==h then h=nil end;if g==""then g=nil end;return f,g,h end;function cFilesystem.get_raw_filename(d)TRACE("cFilesystem.get_raw_filename(file_path)",d)cFilesystem.assert_string(d,"file_path")local f,g,h=cFilesystem.get_path_parts(d)if not g then return end;if h then return cFilesystem.file_strip_extension(g,h)else return g end end;function cFilesystem.is_root_folder(c)TRACE("cFilesystem.is_root_folder(str)",c)cFilesystem.assert_string(c,"str")c=cFilesystem.unixslashes(c)if c=="/"then return true elseif c:match("[a-zA-Z]?:/+$")then return true else return false end end;function cFilesystem.get_parent_directory(d)TRACE("cFilesystem.get_parent_directory(file_path)",d)cFilesystem.assert_string(d,"file_path")local f,g,h=cFilesystem.get_path_parts(d)local i=cFilesystem.get_directories(f)if#i>1 then table.remove(i)return table.concat(i,"/").."/"else return d end end;function cFilesystem.copy_folder(j,k,l,m)TRACE("cFilesystem.copy_folder(src_path,dest_path,file_ext,level)",j,k,l,m)cFilesystem.assert_string(j,"src_path")cFilesystem.assert_string(k,"dest_path")local n=function(o,p,type)local q,r=o:find(j)if not r then error("Unexpected error")end;local s=k.."/"..o:sub(r,#o)if type==cFilesystem.FILETYPE.FILE then local t=o.."/"..p;local u=s.."/"..p;cFilesystem.copy_file(t,u)else os.mkdir(s.."/"..p)end;return true end;cFilesystem.recurse(j,n,l,m)end;function cFilesystem.ensure_unique_filename(d)TRACE("cFilesystem.ensure_unique_filename(file_path)",d)cFilesystem.assert_string(d,"file_path")local v=d;local f,g,h=cFilesystem.get_path_parts(v)local w=h and cFilesystem.file_strip_extension(g,h)or g;local x=cString.detect_counter_in_str(w)while io.exists(v)do if h then v=("%s%s (%d).%s"):format(f,w,x,h)else v=("%s%s (%d)"):format(f,w,x)end;x=x+1 end;return v end;function cFilesystem.get_directories(d)TRACE("cFilesystem.get_directories(file_path)",d)cFilesystem.assert_string(d,"file_path")local y=string.gmatch(d,"(.-)([^\\/])")local z=""local A={}for B,C in y do if B==""then z=z..C else table.insert(A,z)z=C end end;table.insert(A,z)return A end;function cFilesystem.makedir(d)TRACE("cFilesystem.makedir(file_path)",d)cFilesystem.assert_string(d,"file_path")local D=cFilesystem.get_path_parts(d)local E=cString.split(D,"[/\\]")local F=""for B,C in ipairs(E)do F=("%s%s/"):format(F,C)if C=="."then else if not io.exists(F)then if cFilesystem.is_root_folder(F)then else local G,H=os.mkdir(F)if not G then return false,H end end end end end;return true end;function cFilesystem.rename(I,J)TRACE("cFilesystem.rename(old_f,new_f)",I,J)cFilesystem.assert_string(I,"old_f")cFilesystem.assert_string(J,"new_f")local K,H=os.rename(I,J)return K,H end;function cFilesystem.rmdir(D)TRACE("cFilesystem.rmdir(folder_path)",D)cFilesystem.assert_string(D,"folder_path")if not io.exists(D)then return false,"Folder does not exist"end;for L,M in pairs(os.dirnames(D))do cFilesystem.rmdir(D..M.."/")end;for L,g in pairs(os.filenames(D))do local G,H=os.remove(D..g)if not G then return false,H end end;local G,H=os.remove(D)if not G then return false,H end end;function cFilesystem.validate_filename(d)TRACE("cFilesystem.validate_filename(file_path)",d)cFilesystem.assert_string(d,"file_path")if d==""then return false,"Please enter a valid, non-blank name"end;if string.find(d,"[:\\/<>?|]")then return false,"The name contains illegal characters"end;return true end;function cFilesystem.unixslashes(d)TRACE("cFilesystem.unixslashes(file_path)",d)local c=d:gsub("\\","/")return c:gsub("/+","/")end;function cFilesystem.sanitize_filename(d)TRACE("cFilesystem.sanitize_filename(file_path)",d)cFilesystem.assert_string(d,"file_path")return string.gsub(d,"[:\\/<>?|]","")end;function cFilesystem.file_add_extension(d,h)TRACE("cFilesystem.file_add_extension(file_path,extension)",d,h)cFilesystem.assert_string(d,"file_path")cFilesystem.assert_string(h,"extension")local N=string.sub(d,-#h)if N:lower()==h:lower()then return d else return("%s.%s"):format(d,h)end end;function cFilesystem.file_strip_extension(d,h)TRACE("cFilesystem.file_strip_extension(file_path,extension)",d,h)cFilesystem.assert_string(d,"file_path")cFilesystem.assert_string(h,"extension")local e="(.*)%.([^.]*)$"local O,P=string.match(d,e)if string.lower(h)==string.lower(P)then return O end;return d end;function cFilesystem.assert_string(c,Q)TRACE("cFilesystem.assert_string(str,str_name)",c,Q)assert(c,"No "..Q.." specified")assert(type(c)=="string",Q..": expected string, got"..type(c))end;function cFilesystem.load_string(d)TRACE("cFilesystem.load_string(file_path)",d)local R,H=io.open(d,"r")if not R then return false,H end;local S=io.stat(d)if S.type~="file"then R:close()return false,"Attempting to load string from a non-file"end;local c=R:read("*a")if not c then R:close()return false,"Failed to read from file"end;R:close()return c end;function cFilesystem.list_files(T,l,U)TRACE("cFilesystem.list_files(str_path,file_ext,include_path)",T,l,U)cFilesystem.assert_string(T,"str_path")if not l then l={"*.*"}end;if not io.exists(T)then return false,"Can't list files, path does not exist"end;local V=os.filenames(T,l)local v={}for B,C in ipairs(V)do if U then table.insert(v,T.."/"..C)else table.insert(v,C)end end;return v end;function cFilesystem.write_string_to_file(d,c)TRACE("cFilesystem.write_string_to_file(file_path,str)",d,c)cFilesystem.assert_string(d,"file_path")local G=true;local R,H=io.open(d,"w")if not R then return false,H end;if not R:write(c)then G=false end;R:close()if not G then return false,"Could not write to file"else return true end end;function cFilesystem.copy_file(W,X)TRACE("cFilesystem.copy_file(file_in,file_out)",W,X)cFilesystem.assert_string(W,"file_in")cFilesystem.assert_string(X,"file_out")local Y,H=io.open(W,"r")if not Y then return false,H end;local c=Y:read("*a")if not c then Y:close()return false,"Failed to read from file"end;Y:close()local Z=io.open(X,"w")if not Z then return false,H end;local G,H=Z:write(c)if not G then return false,H end;Z:close()end;function cFilesystem.recurse(T,n,l,m)TRACE("cFilesystem.recurse(str_path,callback_fn,file_ext,level)",T,n,l,m)if not l then l={"*.*"}end;if not m then m=0 end;if not io.exists(T)then return false,T,"path does not exist, returning..."end;local V=os.filenames(T,l)for B,C in ipairs(V)do if not n(T,C,cFilesystem.FILETYPE.FILE)then return end end;local _=os.dirnames(T)for B,C in ipairs(_)do if not n(T,C,cFilesystem.FILETYPE.FOLDER)then return end;cFilesystem.recurse(T.."/"..C,n,l,m+1)end end