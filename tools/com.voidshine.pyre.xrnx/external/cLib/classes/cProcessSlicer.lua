class"ProcessSlicer"function ProcessSlicer:__init(a,...)assert(type(a)=="function","expected a function as first argument")self.__process_func=a;self.__process_func_args=arg;self.__process_thread=nil end;function ProcessSlicer:running()return self.__process_thread~=nil end;function ProcessSlicer:start()assert(not self:running(),"process already running")self.__process_thread=coroutine.create(self.__process_func)renoise.tool().app_idle_observable:add_notifier(ProcessSlicer.__on_idle,self)end;function ProcessSlicer:stop()assert(self:running(),"process not running")renoise.tool().app_idle_observable:remove_notifier(ProcessSlicer.__on_idle,self)self.__process_thread=nil end;function ProcessSlicer:__on_idle()assert(self.__process_thread~=nil,"ProcessSlicer internal error: ".."expected no idle call with no thread running")if coroutine.status(self.__process_thread)=='suspended'then local b,c=coroutine.resume(self.__process_thread,unpack(self.__process_func_args))if not b then self:stop()error(c)end elseif coroutine.status(self.__process_thread)=='dead'then self:stop()end end