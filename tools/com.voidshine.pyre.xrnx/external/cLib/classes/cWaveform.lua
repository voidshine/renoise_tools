class'cWaveform'cWaveform.x_pre=0;cWaveform.x_next=0;cWaveform.brown_parameter=1/6;cWaveform.FORM={SIN=1,SAW=2,SQUARE=3,TRIANGLE=4,WHITE_NOISE=5,BROWN_NOISE=6,VIOLET_NOISE=7,COPY=8}function cWaveform.sin_2pi_fn(a)return math.sin(a*2*math.pi)end;function cWaveform.cos_fn(a)return math.cos(a*2*math.pi)end;function cWaveform.saw_fn(a)return 2*(a-math.floor(a+1/2))end;function cWaveform.square_fn(a)local a=cWaveform.cycle_fmod(a)if 0<=a and a<1/2 then return 1 elseif 1/2<=a and a<1 then return-1 end;return 0 end;function cWaveform.triangle_fn(a)local a=cWaveform.cycle_fmod(a)if 0<=a and a<1/4 then return 4*a elseif 1/4<=a and a<3/4 then return-4*a+2 elseif 3/4<=a and a<=1 then return 4*a-4 end;return 0 end;function cWaveform.white_noise_fn()local b=math.random()return 2*b-1 end;function cWaveform.brown_noise_fn()local c=(2*math.random()-1)*cWaveform.brown_parameter;cWaveform.x_next=cWaveform.x_pre+c;if cWaveform.x_next>1 then cWaveform.x_next=1 elseif cWaveform.x_next<-1 then cWaveform.x_next=-1 end;cWaveform.x_pre=cWaveform.x_next;return cWaveform.x_next end;function cWaveform.violet_noise_fn()local c=2*math.random()-1;cWaveform.x_next=(c-cWaveform.x_pre)/2;cWaveform.x_pre=c;return cWaveform.x_next end;function cWaveform.pink_noise_fn()local c=(2*math.random()-1)*1/100;local d=math.modf(biased_noise()*5)for e=1,d+1 do cWaveform.x_next=cWaveform.x_pre+c;cWaveform.x_pre=cWaveform.x_next end;if cWaveform.x_next>1 then cWaveform.x_next=1 elseif cWaveform.x_next<-1 then cWaveform.x_next=-1 end;return cWaveform.x_next end;function cWaveform.mix_fn_fn(f,g,h)local i=1/2;if type(h)=='number'then i=h end;return function(a,j)return f(a,j)*i+g(a,j)*(1-i)end end;function cWaveform.band_limited_fn_fn(k,l,m,n,o,p,q,r)if not n then o,p,q=50,0,1 end;local s,t;if k==cWaveform.FORM.SIN then s=cWaveform.sin_2pi_fn;t=cWaveform.cycle_phase_duty_mod(l,m,o,p,q)return s,t end;local u=function()return function(a)local v=l*a+m;local w=o+p*1/2*(-1*cWaveform.cos_fn(q*a)+1)w=cWaveform._duty_shape(w,r)return(math.floor(v)+cWaveform._duty_phase(math.fmod(v,1),w))/l end end;local x={{},{}}local y,z;y=cWaveform._blit_duty_fn_fn(k,r/l,o,r)z=u(l,0,o,p,q,r)s=function(a)return y(z(a))end;if m~=0 then local A=math.floor(r*m/l)for B=1,r-A do x[1][B]=s((B-1+A)/r)end;for C=r-A+1,r+1 do x[1][C]=s((C-1+A-r)/r)end;s=cWaveform.table2fn(x)end;local D=function(s,E,F)if F==nil then F=1 end;local G=1/32767;for B=1,E do local b=math.abs(s((B-1)/E))if b>=G then G=b end end;local H=1/G;return function(a)return H*F*s(a)end end;s=D(s,r,0.95)return s,t end;function cWaveform.mod_fn_fn(l,m,n,I,p,q)if not n then return cWaveform.cycle_phase_mod(l,m)else return cWaveform.cycle_phase_duty_mod(l,m,I,p,q)end end;function cWaveform.wave_fn(k,l,m,n,I,p,q,J,r)TRACE("cWaveform.wave_fn() - ",k,l,m,n,I,p,q,J,r)local s;local K=cWaveform.mod_fn_fn(l,m,n,I,p,q)if k==cWaveform.FORM.WHITE_NOISE then return cWaveform.white_noise_fn elseif k==cWaveform.FORM.BROWN_NOISE then return cWaveform.brown_noise_fn elseif k==cWaveform.FORM.VIOLET_NOISE then return cWaveform.violet_noise_fn elseif k==cWaveform.FORM.COPY then return cWaveform.sin_2pi_fn end;if not J then if k==cWaveform.FORM.SIN then s=cWaveform.sin_2pi_fn elseif k==cWaveform.FORM.SAW then s=cWaveform.saw_fn elseif k==cWaveform.FORM.SQUARE then s=cWaveform.square_fn elseif k==cWaveform.FORM.TRIANGLE then s=cWaveform.triangle_fn end else s,K=cWaveform.band_limited_fn_fn(k,l,m,n,I,p,q,r)end;if type(K)=='function'then return function(a)return s(K(a))end else return s end end;function cWaveform.cycle_phase_duty_mod(l,m,o,p,q)return function(a)local v=cWaveform.cycle_fmod(cWaveform.cycle_phase_mod(l,m)(a))local w=o+p*1/2*(-1*cWaveform.cos_fn(q*a)+1)local b=cWaveform._duty_phase(v,w)return b end end;function cWaveform._torf(a)return a<=0 and true or false end;function cWaveform.rndm(x)local L=#x;local M=math.random(L)local N,O,P=x[M][1],x[M][2],x[M][3]local b=(O-N)*math.random()+N;return cLib.round_with_precision(b,P)end;function cWaveform.rtn_random_wave(Q)local R=cWaveform.rndm({{1,1},{2,4},{1,4},{1,4},{1,8}})if R==1 then Q.form=cWaveform.FORM.SIN elseif R==2 then Q.form=cWaveform.FORM.SAW elseif R==3 then Q.form=cWaveform.FORM.SQUARE elseif R==4 then Q.form=cWaveform.FORM.TRIANGLE elseif R==5 then Q.form=cWaveform.FORM.WHITE_NOISE elseif R==6 then Q.form=cWaveform.FORM.BROWN_NOISE elseif R==7 then Q.form=cWaveform.FORM.VIOLET_NOISE end;return Q end;function cWaveform.random_fn(Q,F,S,r)TRACE("cWaveform.random_fn(wv,a,duty_off,range)",Q,F,S,r)if F==nil then F=1 end;Q.cycle=cWaveform.rndm({{2,9},{1,8},{1,4}})*F;Q.shift=cWaveform.rndm({{0,0},{-1,1,2}})Q.duty=cWaveform.rndm({{50,50},{1,99},{50,52,1},{48,50,1},{10,90}})Q.duty_v=cWaveform.rndm({{0,0},{0,0},{-0.5,0.5,1},{-1,1,2},{0,10,2},{10,100}})Q.duty_v_f=cWaveform.rndm({{1,1},{-8,8},{-2000,2000}})Q.band_limited=cWaveform._torf(cWaveform.rndm({{1,1}}))Q.duty_onoff=cWaveform._torf(cWaveform.rndm({{0,0},{0,0},{0,0},{0,0},{1,1}}))if S==true then Q.duty_onoff=false end;Q=cWaveform.rtn_random_wave(Q)local y,T=cWaveform.wave_fn(Q.form,Q.cycle,Q.shift,Q.duty_onoff,Q.duty,Q.duty_v,Q.duty_v_f,Q.band_limited,r)if type(T)=='function'then return function(a)return y(T(a))end else return y,Q end end;function cWaveform.random_copy_fn(r)TRACE("cWaveform.random_copy_fn(range)",r)local Q={}Q.cycle=cWaveform.rndm({{1,4},{0.5,0.5},{0.5,0.5}})Q.shift=cWaveform.rndm({{0,0}})Q.duty=cWaveform.rndm({{50,50},{50,50},{50,52,1},{48,50,1},{10,90}})Q.duty_v=cWaveform.rndm({{0,0},{0,0},{0,0},{-0.5,0.5,1},{-1,1,2},{0,10,2},{10,100}})Q.duty_v_f=cWaveform.rndm({{1,1},{-8,8},{-2000,2000}})Q.band_limited=cWaveform._torf(cWaveform.rndm({{1,1}}))Q.duty_onoff=cWaveform._torf(cWaveform.rndm({{0,0},{1,1},{1,1}}))Q.form=cWaveform.FORM.COPY;local y,T=cWaveform.wave_fn(Q.form,Q.cycle,Q.shift,Q.duty_onoff,Q.duty,Q.duty_v,Q.duty_v_f,Q.band_limited,r)if type(T)=='function'then return function(a)return y(T(a))end else return y,Q end end;function cWaveform.table2fn(U)local V=function(W,F,X)if W==F then return X elseif W==X then return F else return nil end end;local Y={}for B=1,2 do Y[B]=table.count(U[B])end;return function(a,j)local Z=j;if Z==nil then Z=1 end;if Y[Z]==0 then Z=V(Z,1,2)end;if Y[Z]==0 then return 0 end;local _=Y[Z]local v=cWaveform.cycle_fmod(a*(_-1),_)local N=math.floor(v)+1;local O=N+1;if O>=_ then O=_ end;local i=v-(N-1)return U[Z][N]*(1-i)+U[Z][O]*i end end;function cWaveform.random_wave(r)TRACE("cWaveform.random_wave(range)",r)local F=cLib.round_value(r/167)if F<5 then F=1 end;local s=cWaveform.random_fn({},F,false,r)for B=1,5 do s=cWaveform.mix_fn_fn(s,cWaveform.random_fn({},F,false,r),math.random())end;local a0=cWaveform.rtn_random_wave{}local a1=cWaveform.wave_fn(a0.form,F*cWaveform.rndm({{1,2},{1,4},{8,8},{16,16}}),0,false,50,0,1,true,r)return cWaveform.mix_fn_fn(s,a1,math.random()*0.9+0.1)end;function cWaveform._duty_shape(I,E)local i=cLib.round_value(I/50*E)/E*50;if i<1/E*50 then return 1/E*50 elseif i>100 then return 100 end;return i end;function cWaveform._duty_phase(a,a2)local i=a2/100;local b=0;if 0<=a and a<i then return 1/(2*i)*a elseif i<=a and a<=1 then return 1/(2*(1-i))*(a-1)+1 end;return 0 end;function cWaveform._max_even(W)local a3=math.floor(W)if math.fmod(a3,2)==1 then return a3-1 else return a3 end end;function cWaveform.cycle_fmod(a,E)if not E then E=1 end;return math.fmod(math.fmod(a,E)+E,E)end;function cWaveform.cycle_phase_mod(a4,a5)return function(a)return a4*a+a5 end end;function cWaveform._sinc_m_fn_fn(E)if E==nil then E=1 end;return function(a)local v=math.sin(math.pi*a/E)local b;if math.abs(v)<=1e-12 then return math.cos(math.pi*a)/math.cos(math.pi*a/E)else return math.sin(math.pi*a)/(E*v)end end end;function cWaveform._blit_saw_tbl(A,m,F,r)if F==nil then F=1 end;local a6=function(W)local a3=math.floor(W)if math.fmod(a3,2)==1 then return a3 else return a3-1 end end;A=A*F;r=r*F;if m==nil then m=0 end;local a7=math.floor(A*cWaveform.cycle_fmod(m+0.5))local E=a6(A/2)if E<=3 then E=3 end;local a8=cWaveform._sinc_m_fn_fn(E)local a9={}local x={{},{}}local b,aa=0,E/A/2;local i=1/A;local ab=E/A;for B=1,cLib.round_value(r+1+a7)do b=aa-ab*a8((B-1)*E/A)+i;a9[B]=b*1/ab*0.58;aa=b end;for C=1,cLib.round_value(r+1)do x[1][C]=a9[C+a7]end;return x end;function cWaveform._blit_square_tbl(A,m,F,r)if F==nil then F=1 end;A=A*F;r=r*F;if m==nil then m=0 end;local a7=math.floor(A*cWaveform.cycle_fmod(m))local A=A/2;local E=cWaveform._max_even(A/2)if E<=2 then E=2 end;local a8=cWaveform._sinc_m_fn_fn(E)local a9={}local x={{},{}}local b,aa=0,-(E/A/2)local ab=E/A;for B=1,cLib.round_value(r+1+a7)do b=aa+ab*a8((B-1)*E/A)a9[B]=b*1/ab*0.58;aa=b end;for C=1,cLib.round_value(r+1)do x[1][C]=a9[C+a7]end;return x end;function cWaveform._blit_triangle_tbl(A,m,F,r)if F==nil then F=1 end;A=A*F;r=r*F;if m==nil then m=0 end;local a7=math.floor(A*cWaveform.cycle_fmod(m+0.25))local ac=A/2;local E=cWaveform._max_even(ac/2)if E<=2 then E=2 end;local a8=cWaveform._sinc_m_fn_fn(E)local ad={}local a9={}local x={{},{}}local ae=E/ac;local b,aa=0,-(ae/2)local af,ag=0,-(ae/2)for B=1,cLib.round_value(r+1+a7)do b=aa+ae*a8((B-1)*E/ac)ad[B]=b;aa=b end;for C=1,cLib.round_value(r+1+a7)do af=ag+ad[C]/ac;a9[C]=af*1/(ae/2)*0.8;ag=af end;for ah=1,cLib.round_value(r+1)do x[1][ah]=a9[ah+a7]end;return x end;function cWaveform._blit_duty_fn_fn(k,A,I,r)TRACE("cWaveform._blit_duty_fn_fn(form,p,duty,range)",k,A,I,r)local ai=cWaveform._blit_square_tbl;if k==cWaveform.FORM.SAW then ai=cWaveform._blit_saw_tbl elseif k==cWaveform.FORM.SQUARE then ai=cWaveform._blit_square_tbl elseif k==cWaveform.FORM.TRIANGLE then ai=cWaveform._blit_triangle_tbl end;I=cWaveform._duty_shape(I,r)local aj=cWaveform._duty_shape(50,r)local ak,al;ak=I/50;al=2-ak;local am,an,ao,ap;am=cWaveform.table2fn(ai(A,0,ak,r))an=cWaveform.table2fn(ai(A,0,al,r))return function(a)local v=math.fmod(a,A/r)/(A/r)local aq;if v<0.5 then return am(a,1)elseif v>=0.5 then return an(a,1)else return 0 end end end