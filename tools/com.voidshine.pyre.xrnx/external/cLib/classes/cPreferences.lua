require(_clibroot.."cFilesystem")class'cPreferences'cPreferences.PROFILES_ENABLED=false;cPreferences.ALWAYS_CHOOSE=false;cPreferences.DEFAULT_NAME="Untitled Profile"cPreferences.PROFILE_FOLDER="./profiles/"cPreferences.BUTTON_H=26;function cPreferences:__init(...)local a=cLib.unpack_args(...)self.tool_name=a.tool_name or"Tool Name"self.doc_class_name=a.doc_class_name;self.active_instances=property(self.get_active_instances)self.selected_profile_index=nil;self.selected_profile=property(self.get_selected_profile)self.launch_callback=a.launch_callback;self.default_callback=a.default_callback;self.abort_callback=a.abort_callback;self.profiles_enabled=property(self.get_profiles_enabled,self.set_profiles_enabled)self.profiles_enabled_observable=renoise.Document.ObservableBoolean(cPreferences.PROFILES_ENABLED)self.always_choose=property(self.get_always_choose,self.set_always_choose)self.always_choose_observable=renoise.Document.ObservableBoolean(cPreferences.ALWAYS_CHOOSE)self.recall_profile=property(self.get_recall_profile,self.set_recall_profile)self.recall_profile_observable=renoise.Document.ObservableString("")self.profiles={}self.dialog=nil;self.dialog_contents=nil;self.suppress_saving=false;self:load_settings()self:scan_profiles()self:build_dialog()end;function cPreferences:get_selected_profile()return self.profiles[self.selected_profile_index]end;function cPreferences:get_profiles_enabled()return self.profiles_enabled_observable.value end;function cPreferences:set_profiles_enabled(b)self.profiles_enabled_observable.value=b;self:save_settings()end;function cPreferences:get_always_choose()return self.always_choose_observable.value end;function cPreferences:set_always_choose(b)self.always_choose_observable.value=b;self:save_settings()end;function cPreferences:get_recall_profile()return self.recall_profile_observable.value end;function cPreferences:set_recall_profile(b)self.recall_profile_observable.value=b;self:save_settings()end;function cPreferences:get_active_instances()local c=0;for d,e in ipairs(self.profiles)do if e.active then c=c+1 end end;return c end;function cPreferences:get_profile_names()local f={}for d,e in ipairs(self.profiles)do table.insert(f,e.name)end;return f end;function cPreferences:scan_profiles()self.profiles={}local g=cPreferences.PROFILE_FOLDER;if not io.exists(g)then os.mkdir(g)end;local h=os.dirnames(g)for d,e in ipairs(h)do local i=os.filenames(g..e)local j,k,l=false,false,nil;for m,n in ipairs(i)do local o=io.stat(g..e.."/"..n)if n=="preferences.xml"then j=true end;if n=="active"then k=true;l=o.mtime end end;table.insert(self.profiles,{name=e,has_config=j,active=k,mtime=l})end end;function cPreferences:get_profile_by_name(p)for d,e in ipairs(self.profiles)do if e.name==p then return e,d end end end;function cPreferences:attempt_launch()local q,r=self:get_profile_by_name(self.recall_profile)if self.profiles_enabled then if q then self:launch_profile(r)elseif self.always_choose then self:show_dialog()return end end;self.default_callback()end;function cPreferences:close_dialog()if self.dialog and self.dialog.visible then self.dialog:close()end;self.dialog=nil end;function cPreferences:launch_profile(s)local q=self.profiles[s]if q then local t;if self.doc_class_name then t=_G[self.doc_class_name]()else t=renoise.Document.create("ScriptingToolPreferences"){}end;local u=cPreferences.PROFILE_FOLDER.."/"..q.name.."/preferences.xml"t:load_from(u)local v=renoise.tool().bundle_path.."preferences.xml"local w=renoise.tool().bundle_path.."preferences.xml.old"os.move(v,w)local x=cPreferences.PROFILE_FOLDER.."/"..q.name.."/active"local y="This file indicates that the profile is in use"cFilesystem.write_string_to_file(x,y)self.selected_profile_index=s;self.launch_callback(t)end end;function cPreferences:remove_profile(s)local q=self.profiles[s]if not q then return false,"Can't remove, profile doesn't exist"end;local g=cPreferences.PROFILE_FOLDER.."/"..q.name.."/"local z,A=cFilesystem.rmdir(g)if not z then return false,A end;table.remove(self.profiles,s)if s==self.selected_profile_index then self.selected_profile_index=nil end end;function cPreferences:add_profile(p)local g=cPreferences.PROFILE_FOLDER.."/"..p;local g=cFilesystem.ensure_unique_filename(g)local B=cFilesystem.get_raw_filename(g)os.mkdir(g)local C=g.."/preferences.xml"local t;if self.doc_class_name then t=_G[self.doc_class_name]()else t=renoise.Document.create("ScriptingToolPreferences"){}end;t:save_as(C)return true end;function cPreferences:rename_profile(s,p)local q=self.profiles[s]if not q then return false,"Can't rename, profile doesn't exist"end;local g=cPreferences.PROFILE_FOLDER.."/"..p;local g=cFilesystem.ensure_unique_filename(g)local B=cFilesystem.get_raw_filename(g)if p~=B then return false,"A profile already exist with that name, please choose another one"end;local D=cPreferences.PROFILE_FOLDER.."/"..q.name;cFilesystem.rename(D,g)return true end;function cPreferences:update_profile()local q=self.selected_profile;if not q then return false,"Can't update, no profile is selected"end;local t=renoise.tool().preferences;local u=cPreferences.PROFILE_FOLDER.."/"..q.name.."/preferences.xml"local E,A=t:save_as(u)if not E then return false,A end;return true end;function cPreferences:show_dialog()if not self.dialog or not self.dialog.visible then self.dialog=renoise.app():show_custom_dialog(("%s - Select Profile"):format(self.tool_name),self.dialog_contents)else self.dialog:show()end end;function cPreferences:rebuild_and_show()self:close_dialog()self:scan_profiles()self:build_dialog()self:show_dialog()end;function cPreferences:build_dialog()local F=renoise.ViewBuilder()local G=function(l)local H=os.difftime(os.time(),l)if H<3600 then return("%d minutes ago"):format(H/60)else return os.date("%c",l)end end;local I={}for d,e in ipairs(self.profiles)do local J=G(e.mtime)local K=""if e.active then K=(" - Last session was %s"):format(J)or""elseif not e.has_config then K=" - using default settings"end;table.insert(I,e.name..K)end;local L=F:row{F:button{text="Proceed",height=cPreferences.BUTTON_H,notifier=function()if not F.views.profile_chooser then self.default_callback()else local s=F.views.profile_chooser.value;if s==1 then self.default_callback()else self:launch_profile(s-1)end end;self:close_dialog()end},F:button{text="Add...",height=cPreferences.BUTTON_H,notifier=function()local p=cPreferences.DEFAULT_NAME;p=vPrompt.prompt_for_string(p,"Enter name","Add Profile")if not p then return end;local z,A=self:add_profile(p)if A then renoise.app():show_warning(A)else self:rebuild_and_show()end end},F:button{id="xprefs_remove_bt",text="Remove",active=false,visible=not table.is_empty(I)and true or false,height=cPreferences.BUTTON_H,notifier=function()local M="Are you sure you want to remove this profile?"local N=renoise.app():show_prompt("Remove Profile",M,{"OK","Cancel"})if N=="OK"then local s=F.views.profile_chooser.value;local z,A=self:remove_profile(s-1)if A then renoise.app():show_warning(A)else self:rebuild_and_show()end end end},F:button{id="xprefs_rename_bt",text="Rename",active=false,visible=not table.is_empty(I)and true or false,height=cPreferences.BUTTON_H,notifier=function()local s=F.views.profile_chooser.value;local p=self.profiles[s-1].name;p=vPrompt.prompt_for_string(p,"Enter name","Rename Profile")local z,A=self:rename_profile(s-1,p)if A then renoise.app():show_warning(A)else self:rebuild_and_show()end end},F:button{text="Don't Launch",height=cPreferences.BUTTON_H,notifier=function()if self.abort_callback then self.abort_callback()end;self:close_dialog()end}}if table.is_empty(I)then self.dialog_contents=F:column{margin=6,spacing=6,F:row{F:text{text=("%s supports configuration profiles,".."\nbut no profiles have yet been defined.".."\n".."\nClick 'Proceed' to launch with current settings,".."\nor 'Add Profile' to create a new profile."):format(self.tool_name)}},F:row{F:checkbox{value=not self.always_choose,notifier=function(b)self.always_choose=not b end},F:text{text="Do not show this dialog"}},L}else table.insert(I,1,"Launch tool with current settings")local O=1;if self.recall_profile~=""then local P=table.find(I,self.recall_profile)if P then O=P end end;self.dialog_contents=F:column{margin=6,spacing=6,F:row{F:text{text=("%s supports configuration profiles - ".."\nplease select one before launching:"):format(self.tool_name)}},F:row{margin=6,F:chooser{id="profile_chooser",items=I,value=O,notifier=function(s)if s==1 then F.views.xprefs_remove_bt.active=false;F.views.xprefs_rename_bt.active=false else F.views.xprefs_remove_bt.active=true;F.views.xprefs_rename_bt.active=true end end}},F:row{F:checkbox{value=not self.always_choose,notifier=function(b)self.always_choose=not b;if b then local s=F.views.profile_chooser.value;if s==1 then self.recall_profile=""else local q=self.profiles[s-1]self.recall_profile=q.name end else self.recall_profile=""end end},F:text{text="Remember this choice"}},L}end end;function cPreferences:load_settings()local t=renoise.Document.create("cPreferencesSettings"){}t:add_property("profiles_enabled",renoise.Document.ObservableBoolean(cPreferences.PROFILES_ENABLED))t:add_property("always_choose",renoise.Document.ObservableBoolean(cPreferences.ALWAYS_CHOOSE))t:add_property("recall_profile",renoise.Document.ObservableString(""))local z,A=t:load_from(cPreferences.PROFILE_FOLDER.."settings.xml")if z then self.suppress_saving=true;self.profiles_enabled=t:property('profiles_enabled').value;self.always_choose=t:property('always_choose').value;self.recall_profile=t:property('recall_profile').value;self.suppress_saving=false end end;function cPreferences:save_settings()if self.suppress_saving then return end;local t=renoise.Document.create("cPreferencesSettings"){}t:add_property("profiles_enabled",self.profiles_enabled)t:add_property("always_choose",self.always_choose)t:add_property("recall_profile",renoise.Document.ObservableString(self.recall_profile))local z,A=t:save_as(cPreferences.PROFILE_FOLDER.."settings.xml")end