class'cReflection'function cReflection.copy_object_properties(a,b,c)TRACE("cReflection.copy_object_properties(from_class,to_class,level)",a,b,c)if type(a)~=type(b)then LOG("*** Classes need to be of an identical type:",type(a),type(b))return false end;local d=function(e,f,g)f[g]=e end;local c=c or 0;local h=1;local i=cReflection.get_object_info(a)for j,k in ipairs(i)do if k:find("_observable")then elseif not cReflection.is_standard_type(a[k])then if c<h then cReflection.copy_object_properties(a[k],b[k],c+1)end else local l=pcall(d,a[k],b,k)if not l then end end end;return true end;function cReflection.as_boolean(e,m)if type(e)=="nil"then return m else return cReflection.cast_value(e,"boolean")end end;function cReflection.cast_value(e,n)TRACE("cReflection.cast_value(val,val_type)",e,n)if n=="boolean"then if type(e)=="boolean"then return e elseif type(e)=="string"then if e=="true"or e=="1"then return true else return false end elseif type(e)=="number"then if e==1 then return true else return false end else error("Could not cast value as boolean")end elseif n=="string"then return tostring(e)elseif n=="number"then return tonumber(e)else error("Unsupported datatype")end end;function cReflection.get_object_properties(class,o)TRACE("cReflection.get_object_properties(class,_level)",class,o)local p={}local c=o or 0;local h=1;local i=cReflection.get_object_info(class)for j,k in ipairs(i)do if k:find("_observable")then elseif not cReflection.is_standard_type(class[k])then if c<h then p[k]=cReflection.get_object_properties(class[k],c+1)end else p[k]=class[k]end end;return p end;function cReflection.get_object_info(class)TRACE("cReflection.get_object_info(class)",class)local q={}local r=objinfo(class)local s,t=r:find("properties:")if t then local u=r:find("methods:")local v=r:sub(t+1,u-1)for k in v:gmatch("([%a_]+)")do table.insert(q,k)end end;return q end;function cReflection.is_standard_type(e)return table.find({"nil","boolean","number","string","table","function","thread"},type(e))end;function cReflection.is_serializable_type(e)return table.find({"boolean","number","string","table"},type(e))end;function cReflection.set_property(r,w)w=type(w)=="string"and'"'..w..'"'or w;local l,x=pcall(function()loadstring(r.." = "..tostring(w))()end)if not l then return false,x else return true end end;function cReflection.evaluate_string(y)TRACE("cReflection.evaluate_string(x)",y)local z;local A='return '..y;if pcall(loadstring(A))==false or loadstring(A)()==nil then return nil else z=loadstring(A)()end;return tonumber(z)end;function cReflection.is_valid_identifier(r)if string.match(r,"^%d+")then return false,("'%s' is not a valid identifier (avoid using number as the first character)"):format(r)end;local B=string.match(r,"[_%w]*")if B and#B==#r then return true else return false,("'%s' is not a valid identifier (avoid using special characters)"):format(r)end end