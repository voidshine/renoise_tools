require(_clibroot.."cTable")require(_clibroot.."cReflection")class'cPersistence'function cPersistence:load(a)TRACE("cPersistence:load(file_path)")assert(type(a)=="string")local b,c=cFilesystem.load_string(a)local d=self:looks_like_definition(b)if not d then return false,("The file '%s' does not look like a definition"):format(a)end;local d,c=pcall(function()assert(loadfile(a))end)if not d then c="*** Error: Failed to load the definition '"..a.."' - "..c;return false,c end;local e=assert(loadfile(a))()self:assign_definition(e)end;function cPersistence:save(a)TRACE("cPersistence:save(file_path)",a)assert(type(a)=="string")local f,c=cFilesystem.write_string_to_file(a,self:serialize())if not f then return false,c end;return true end;function cPersistence:serialize()TRACE("cPersistence:serialize()")return cLib.serialize_table(self:obtain_definition())end;function cPersistence:assign_definition(e,g,h)TRACE("cPersistence:assign_definition(def,_ref,_prop_names)",e,g,h)assert(type(e)=="table")local i=function(e,j)if not rawget(_G,j)then renoise.app():show_warning(("Could not instantiate: unknown class '%s'"):format(j))else local k=_G[j]()k:assign_definition(e)return k end end;local j=cPersistence.get_persisted_type(e)if g and j then return i(e,j)end;g=g and g or self;h=h and h or self.__PERSISTENCE;for l,m in ipairs(h)do local n=e[m]local j=cPersistence.get_persisted_type(n)if j then g[m]=i(n,j)else if type(n)=="table"and cTable.is_indexed(n)then g[m]={}for o,p in ipairs(n)do local q={}q=cPersistence.assign_definition(self,p,q,table.keys(p))table.insert(g[m],q)end else g[m]=n end end end;return g end;function cPersistence:looks_like_definition(b)TRACE("cPersistence:looks_like_definition(str_def)",b)assert(type(b)=="string")local r='\[?\"?'local s='\]?\"?[%s]*=[%s]'for l,m in ipairs(self.__PERSISTENCE)do if not string.find(b,r..m..s)then return false end end;return true end;function cPersistence:obtain_definition()TRACE("cPersistence:obtain_definition()")local e={__type=type(self)}for l,m in ipairs(self.__PERSISTENCE)do local n=cPersistence.obtain_property_definition(self[m],m)if n then e[m]=n end end;return e end;function cPersistence.obtain_property_definition(t,m)TRACE("cPersistence.obtain_property_definition(prop,prop_name)",t,m)local e={}if cReflection.is_serializable_type(t)then if type(t)=="table"then if cTable.is_indexed(t)then for o,p in ipairs(t)do local u=cPersistence.obtain_property_definition(p,o)if u then e[o]=u end end else for o,p in pairs(t)do local u=cPersistence.obtain_property_definition(p,o)if u then e[o]=u end end end else e=t end else if t.__PERSISTENCE and t.obtain_definition then e=t:obtain_definition()else LOG("Warning: this property is not serializable:",m)end end;return e end;function cPersistence.get_persisted_type(e)return type(e)=="table"and e.__type end;function cPersistence.determine_type(v)TRACE("cPersistence.determine_type(fpath)",v)assert(type(v)=="string")local b,c=cFilesystem.load_string(v)if c then return false,c end;local w=string.find(b,"__type")local x=string.match(b.sub(b,w),' = "(%a+)"')return x end