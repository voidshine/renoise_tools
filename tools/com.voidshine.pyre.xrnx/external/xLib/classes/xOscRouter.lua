class'xOscRouter'function xOscRouter:__init(...)local a=cLib.unpack_args(...)self.patterns=property(self.get_patterns,self.set_patterns)self._patterns=a.patterns or{}self.cache={}end;function xOscRouter:get_patterns()return self._patterns end;function xOscRouter:set_patterns(b)assert(type(b)=="table","Expected table as argument")self._patterns=b;self.cache={}end;function xOscRouter:input(c)local d=tostring(c)local e={}if self.cache[d]then for f,g in ipairs(self.cache[d])do table.insert(e,g)end else local h=true;for f,g in ipairs(self.patterns)do local i,j=g:match(c)if i then if not g.cacheable then h=false end;table.insert(e,g)else end end;if h then for f,g in ipairs(e)do if not self.cache[d]then self.cache[d]={}end;table.insert(self.cache[d],g)end end end;return e end;function xOscRouter:add_pattern(k)table.insert(self.patterns,k)local l=#self.patterns;k.before_modified_observable:add_notifier(function()self:remove_from_cache(l)end)return#self.patterns end;function xOscRouter:replace_pattern(k,m)self.patterns[m]=k end;function xOscRouter:remove_pattern(m)self:remove_from_cache(m)table.remove(self.patterns,m)end;function xOscRouter:remove_from_cache(m)local k=self.patterns[m]local n=k.pattern_in;local o=k:purely_literal()if o then local d=tostring(k:generate())if self.cache[d]then self.cache[d]=nil end;for f,g in pairs(self.cache)do for p,q in ripairs(g)do local r,j=xOscPattern.types_are_matching(k,q)if r then self.cache[f]=nil end end end end end