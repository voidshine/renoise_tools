cLib.require(_xlibroot.."xLinePattern")class'xEffectColumn'xEffectColumn.tokens={"number_value","number_string","amount_value","amount_string"}xEffectColumn.output_tokens={"number_value","amount_value"}xEffectColumn.SUPPORTED_EFFECTS={"Axy - Arpeggio","Bxx - Backwards","Cxy - Cut Volume","Dxx - Slide Pitch Down","Exx - Set Envelope Pos","Gxx - Glide Note ","Ixx - Fade Volume In","Jxx - Track Routing","Lxx - Set Track Level","Mxx - Set Note Volume","Nxy - Set Auto Pan","Pxx - Set Track Pan","Qxx - Delay By Ticks","Rxy - Retrigger Line","Sxx - Trigger Offset/Slice","Txy - Set Tremolo","Uxy - Slide Pitch Up","Vxy - Set Vibrato","Wxx - Set Track Width","Xxx - Stop All Notes","Yxx - MaYbe Trigger Line","Zxy - Trigger Phrase"}xEffectColumn.SUPPORTED_EFFECT_CHARS={10,11,12,13,14,16,18,19,21,22,23,25,26,27,28,29,30,31,32,33,34,35}xEffectColumn.TYPE={EFFECT_COLUMN=1,EFFECT_SUBCOLUMN=2,EFFECT_NOTECOLUMN=3}function xEffectColumn:__init(a)self.number_value=property(self.get_number_value,self.set_number_value)self._number_value=nil;self.number_string=property(self.get_number_string,self.set_number_string)self._number_string=nil;self.amount_value=property(self.get_amount_value,self.set_amount_value)self._amount_value=nil;self.amount_string=property(self.get_amount_string,self.set_amount_string)self._amount_string=nil;if type(a)=="xEffectColumn"then for b,c in pairs(xEffectColumn.output_tokens)do if a[c]then self[c]=a[c]end end elseif type(a)=="table"and not table.is_empty(a)then for b,c in pairs(xEffectColumn.tokens)do if a[c]then self[c]=a[c]end end end end;function xEffectColumn:get_number_value()return self._number_value end;function xEffectColumn:set_number_value(d)self._number_value=d;self._number_string=xEffectColumn.number_value_to_string(d)end;function xEffectColumn:get_number_string()return self._number_string end;function xEffectColumn:set_number_string(e)self._number_string=e;self._number_value=xEffectColumn.number_string_to_value(e)end;function xEffectColumn:get_amount_value()return self._amount_value end;function xEffectColumn:set_amount_value(d)self._amount_value=d;self._amount_string=xEffectColumn.amount_value_to_string(d)end;function xEffectColumn:get_amount_string()return self._amount_string end;function xEffectColumn:set_amount_string(e)self._amount_string=e;self._amount_value=xEffectColumn.amount_string_to_value(e)end;function xEffectColumn:do_write(f,g,h)for i,c in ipairs(g)do if self["do_write_"..c]then local j=pcall(function()self["do_write_"..c](self,f,h)end)if not j then LOG("WARNING: xEffectColumn - Trying to write invalid value to property:",c,self[c])end end end end;function xEffectColumn:do_write_number_value(f,h)if self.number_value then f.number_value=self.number_value elseif h then f.number_value=0 end end;function xEffectColumn:do_write_number_string(f,h)if self.number_string then f.number_string=self.number_string elseif h then f.number_string=xLinePattern.EMPTY_STRING end end;function xEffectColumn:do_write_amount_value(f,h)if self.amount_value then f.amount_value=self.amount_value elseif h then f.amount_value=0 end end;function xEffectColumn:do_write_amount_string(f,h)if self.amount_string then f.amount_string=self.amount_string elseif h then f.amount_string=xLinePattern.EMPTY_STRING end end;function xEffectColumn.number_value_to_string(d)local k=math.floor(d/256)local l=xLinePattern.EFFECT_CHARS[k+1]local m=xLinePattern.EFFECT_CHARS[d-k*256+1]if l and m then return l..m else error("Unexpected effect number. Expected two bytes between 0-35 respectively")end end;function xEffectColumn.number_string_to_value(e)local n=table.find(xLinePattern.EFFECT_CHARS,string.sub(e,1,1))-1;local o=table.find(xLinePattern.EFFECT_CHARS,string.sub(e,2,2))-1;if n and o then return n*256+o else return 0 end end;function xEffectColumn.amount_value_to_string(d)return("%.2X"):format(d)end;function xEffectColumn.amount_string_to_value(e)return tonumber("0x"..e)end;function xEffectColumn.do_read(f)local p={}for i,q in ipairs(xEffectColumn.tokens)do p[q]=f[q]end;return p end;function xEffectColumn:__tostring()return"xEffectColumn"end