require(_clibroot.."cDocument")require(_clibroot.."cWaveform")class'xSampleBuffer'(cDocument)xSampleBuffer.SAMPLE_INFO={EMPTY=1,SILENT=2,PAN_LEFT=4,PAN_RIGHT=8,DUPLICATE=16,MONO=32,STEREO=64}xSampleBuffer.SAMPLE_CHANNELS={LEFT=1,RIGHT=2,BOTH=3}xSampleBuffer.BIT_DEPTH={0,8,16,24,32}xSampleBuffer.SAMPLE_RATE={11025,22050,32000,44100,48000,88200,96000,192000}xSampleBuffer.DEFAULT_BIT_DEPTH=16;xSampleBuffer.DEFAULT_SAMPLE_RATE=48000;xSampleBuffer.DEFAULT_NUM_CHANNELS=1;xSampleBuffer.DEFAULT_NUM_FRAMES=168;xSampleBuffer.CH_UTIL={{0,0,{{1,1},1}},{{{1,2},1},{{2,1},1},{{1,2},2}}}xSampleBuffer.DOC_PROPS={bit_depth="number",sample_rate="number",number_of_frames="number",number_of_channels="number"}function xSampleBuffer:__init(...)local a=cLib.unpack_args(...)self.bit_depth=a.bit_depth or xSampleBuffer.DEFAULT_BIT_DEPTH;self.sample_rate=a.sample_rate or xSampleBuffer.DEFAULT_SAMPLE_RATE;self.number_of_channels=a.number_of_channels or xSampleBuffer.DEFAULT_NUM_CHANNELS;self.number_of_frames=a.number_of_frames or xSampleBuffer.DEFAULT_NUM_FRAMES end;function xSampleBuffer:get_default_properties()return{bit_depth=xSampleBuffer.DEFAULT_BIT_DEPTH,sample_rate=xSampleBuffer.DEFAULT_SAMPLE_RATE,number_of_channels=xSampleBuffer.DEFAULT_NUM_CHANNELS,number_of_frames=xSampleBuffer.DEFAULT_NUM_FRAMES}end;function xSampleBuffer.select_all(b)b.selection_end=b.number_of_frames;b.selection_start=1 end;function xSampleBuffer.get_selection_range(b)return b.selection_end-b.selection_start+1 end;function xSampleBuffer.right_is_selected(b)return b.selected_channel==renoise.SampleBuffer.CHANNEL_LEFT_AND_RIGHT or b.selected_channel==renoise.SampleBuffer.CHANNEL_RIGHT end;function xSampleBuffer.left_is_selected(b)return b.selected_channel==renoise.SampleBuffer.CHANNEL_LEFT_AND_RIGHT or b.selected_channel==renoise.SampleBuffer.CHANNEL_LEFT end;function xSampleBuffer.selection_toggle_right(b)if b.selected_channel==renoise.SampleBuffer.CHANNEL_LEFT then b.selected_channel=renoise.SampleBuffer.CHANNEL_LEFT_AND_RIGHT elseif b.selected_channel==renoise.SampleBuffer.CHANNEL_LEFT_AND_RIGHT then b.selected_channel=renoise.SampleBuffer.CHANNEL_LEFT end end;function xSampleBuffer.selection_toggle_left(b)if b.selected_channel==renoise.SampleBuffer.CHANNEL_RIGHT then b.selected_channel=renoise.SampleBuffer.CHANNEL_LEFT_AND_RIGHT elseif b.selected_channel==renoise.SampleBuffer.CHANNEL_LEFT_AND_RIGHT then b.selected_channel=renoise.SampleBuffer.CHANNEL_RIGHT end end;function xSampleBuffer.mod_fn_shaped(c)local d=type(c)if d=="number"then return function(e)return c*e end elseif d=="function"then return c else return function(e)return e end end end;function xSampleBuffer.copy_fn_fn(b,f,g,h)TRACE("xSampleBuffer.copy_fn_fn()",b,f,g,h)assert(type(b)=="SampleBuffer")g=g or b.selection_start;h=g or b.selection_end;local i=h-g+1;local j=not f and 1 or 0;return function(k,l)local e=cWaveform.cycle_fmod(k)local m=cWaveform.cycle_fmod(e*i,i+1)local n=math.floor(m)local o=n+1;if o>=i then o=n end;local p=(m-n)*j;return b:sample_data(l,n+g)*(1-p)+b:sample_data(l,o+g)*p end end;function xSampleBuffer.wave2tbl(...)TRACE("xSampleBuffer.wave2tbl(...)")local a=xSampleBuffer.parse_processing_args(...)local q={{0,0,{1,1}},{{1,1},{2,2},{1,2}}}local r=q[a.number_of_channels][a.selected_channel]local s,t=r[1],r[2]local u={{},{}}for v=s,t do for w=1,a.range do u[v][w]=a.buffer:sample_data(v,w+a.selection_start-1)end;if math.abs(u[v][a.range])<=2/32767 then u[v][a.range+1]=0 else u[v][a.range+1]=u[v][a.range]end end;return u end;function xSampleBuffer.get_bit_depth(b)TRACE("xSampleBuffer.get_bit_depth(buffer)",b)assert(type(b)=="SampleBuffer")assert(b.has_sample_data,"Sample buffer is empty")local function x(y)local z={}local A=#y+1;for B,C in ipairs(y)do z[A-B]=C end;return z end;local function D(E)local y={}while E>0 do local F=E%2;y[#y+1]=F;E=(E-F)/2 end;y=x(y)return y end;local G=0;local H=math.pow(2,32)/2;local I=b.number_of_channels;local J=b.number_of_frames;for K=1,J do for L=1,I do local M=(1+b:sample_data(L,K))*H;local N=D(M)for O=1,#N do if N[O]==1 then if O>G then G=O end end end end end;return xSampleBuffer.bits_to_xbits(G),G end;function xSampleBuffer.bits_to_xbits(P)if P==0 then return 0 end;for B,Q in ipairs(xSampleBuffer.BIT_DEPTH)do if P<=Q then return Q end end;error("Number is outside allowed range")end;function xSampleBuffer.get_channel_info(b)TRACE("xSampleBuffer.get_channel_info(buffer)",b)if not b.has_sample_data then return xSampleBuffer.SAMPLE_INFO.EMPTY end;if b.number_of_channels==1 then if xSampleBuffer.is_silent(b,xSampleBuffer.SAMPLE_CHANNELS.LEFT)then return xSampleBuffer.SAMPLE_INFO.SILENT else return xSampleBuffer.SAMPLE_INFO.MONO end end;local R=true;local S=true;local T=true;local U=true;local V=nil;local W=nil;local J=b.number_of_frames;for K=1,J do V=b:sample_data(1,K)W=b:sample_data(2,K)if V~=0 then T=false;S=false end;if W~=0 then T=false;R=false end;if V~=W then U=false;if not T and not S and not R then return xSampleBuffer.SAMPLE_INFO.STEREO end end end;if T then return xSampleBuffer.SAMPLE_INFO.SILENT elseif U then return xSampleBuffer.SAMPLE_INFO.DUPLICATE elseif S then return xSampleBuffer.SAMPLE_INFO.PAN_RIGHT elseif R then return xSampleBuffer.SAMPLE_INFO.PAN_LEFT end;return xSampleBuffer.SAMPLE_INFO.STEREO end;function xSampleBuffer.detect_leading_trailing_silence(b,I,X)TRACE("xSampleBuffer.detect_leading_trailing_silence(buffer,channels,threshold)",b,I,X)assert(b.has_sample_data,"Sample buffer is empty")if not X then X=0 end;local J=b.number_of_frames;local Y=nil;local Z=nil;local _=nil;local a0=function(a1,a2)local a3=math.abs(a2)if a3>X then if not Z then Z=a1 end;_=nil else if Y and Y>X then _=a1 end end;Y=a3 end;if I==xSampleBuffer.SAMPLE_CHANNELS.BOTH then for K=1,J do local a2=(b:sample_data(1,K)+b:sample_data(2,K))/2;a0(K,a2)end elseif I==xSampleBuffer.SAMPLE_CHANNELS.LEFT then for K=1,J do a0(K,b:sample_data(1,K))end elseif I==xSampleBuffer.SAMPLE_CHANNELS.RIGHT then for K=1,J do a0(K,b:sample_data(2,K))end end;return Z,_ end;function xSampleBuffer.is_silent(b,I)TRACE("xSampleBuffer.is_silent(buffer,channels)",b,I)assert(b.has_sample_data,"Sample buffer is empty")local J=b.number_of_frames;if I==xSampleBuffer.SAMPLE_CHANNELS.BOTH then for K=1,J do if b:sample_data(1,K)~=0 or b:sample_data(2,K)~=0 then return false end end elseif I==xSampleBuffer.SAMPLE_CHANNELS.LEFT then for K=1,J do if b:sample_data(1,K)~=0 then return false end end elseif I==xSampleBuffer.SAMPLE_CHANNELS.RIGHT then for K=1,J do if b:sample_data(2,K)~=0 then return false end end end;return true end;function xSampleBuffer.set_buffer_selection(b,g,h)TRACE("xSampleBuffer.set_buffer_selection()",b,g,h)assert(b.has_sample_data,"Sample buffer is empty")local a4=1;local a5=b.number_of_frames;b.selection_range={cLib.clamp_value(g,a4,a5),cLib.clamp_value(h,a4,a5)}end;function xSampleBuffer.get_offset_indices(a6)TRACE("xSampleBuffer.get_offset_indices(num_frames)",a6)local a7=a6/256;local a8=0;local a9,aa={},{0}for B=1,256 do local a2=a7*B;local ab=cLib.round_value(a2)if a8==ab then table.insert(a9,B)else table.insert(aa,B)end;a8=ab end;return aa,a9 end;function xSampleBuffer.get_nearest_offset(a6,ac,x)TRACE("xSampleBuffer.get_nearest_offset(num_frames,offset,reverse)",a6,ac,x)local aa,ad=xSampleBuffer.get_offset_indices(a6)return cTable.nearest(aa,ac)end;function xSampleBuffer.get_next_offset(a6,ac)TRACE("xSampleBuffer.get_next_offset(num_frames,offset)",a6,ac)local aa,ad=xSampleBuffer.get_offset_indices(a6)return cTable.next(aa,ac)end;function xSampleBuffer.get_previous_offset(a6,ac)TRACE("xSampleBuffer.get_previous_offset(num_frames,offset)",a6,ac)local aa,ad=xSampleBuffer.get_offset_indices(a6)return cTable.previous(aa,ac)end;function xSampleBuffer.get_offset_by_frame(b,a1)TRACE("xSampleBuffer.get_offset_by_frame(buffer,frame)",b,a1)assert(b.has_sample_data,"Sample buffer is empty")if a1<=1 then return 0 end;local a6=b.number_of_frames;local ac=(a1-1)*0x100/b.number_of_frames;if a6<0x100 then ac=xSampleBuffer.get_nearest_offset(a6,cLib.round_value(ac),true)else ac=cLib.round_value(ac)end;return ac end;function xSampleBuffer.get_frame_by_offset(b,ac)TRACE("xSampleBuffer.get_frame_by_offset(buffer,offset)",b,ac)assert(b.has_sample_data,"Sample buffer is empty")if ac==0 then return 1 end;local a6=b.number_of_frames;if ac>=0x100 then return a6 end;if a6<0x100 then ac=xSampleBuffer.get_nearest_offset(a6,ac)end;local a1=1+ac*a6/0x100;a1=math.min(a1,a6)return cLib.round_value(a1)end;function xSampleBuffer.get_frame_by_line(b,ae,af,ag)TRACE("xSampleBuffer.get_frame_by_line(buffer,line,lpb,bpm)",b,ae,af,ag)assert(b.has_sample_data,"Sample buffer is empty")af=not af and rns.transport.lpb or af;ag=not ag and rns.transport.bpm or ag;local ah=rns.transport.lpb*rns.transport.bpm;local ai=60/ah;local aj=ai*b.sample_rate;return ae*aj end;function xSampleBuffer.get_frame_by_beat(b,ak,af,ag)TRACE("xSampleBuffer.get_frame_by_beat(buffer,beat,lpb,bpm)",b,ak,af,ag)af=not af and rns.transport.lpb or af;ag=not ag and rns.transport.bpm or ag;return xSampleBuffer.get_frame_by_line(b,ak*af)end;function xSampleBuffer.get_beat_by_frame(b,a1,ag)TRACE("xSampleBuffer.get_beat_by_frame(buffer,frame,bpm)",b,a1,ag)assert(type(b)=="SampleBuffer")assert(type(a1)=="number")assert(b.has_sample_data,"Sample buffer is empty")ag=not ag and rns.transport.bpm or ag;return a1/(1/rns.transport.bpm*60*b.sample_rate)end;function xSampleBuffer.get_line_by_frame(b,a1,af,ag)TRACE("xSampleBuffer.get_line_by_frame(buffer,frame,lpb,bpm)",b,a1,af,ag)af=not af and rns.transport.lpb or af;local ak=xSampleBuffer.get_beat_by_frame(b,a1,ag)return af*ak end;function xSampleBuffer.parse_processing_args(...)local a=cLib.unpack_args(...)assert(type(a.buffer)=="SampleBuffer")a.number_of_frames=a.number_of_frames or a.buffer.number_of_frames;a.number_of_channels=a.number_of_channels or a.buffer.number_of_channels;a.selected_channel=a.selected_channel or a.buffer.selected_channel;a.selection_start=a.selection_start or a.buffer.selection_start;a.selection_end=a.selection_end or a.buffer.selection_end;a.range=xSampleBuffer.get_selection_range(a)return a end;function xSampleBuffer.create_wave_fn(...)TRACE("xSampleBuffer.create_wave_fn(...)")local a=xSampleBuffer.parse_processing_args(...)assert(type(a.fn)=="function")local al=function(new_buffer)TRACE("[make_wave] do_process - new_buffer",new_buffer)for l=1,a.number_of_channels do local am=xSampleBuffer.get_frame_generator_fn(a.fn,l,a.mod_fn,a.buffer,a.selection_start,a.range,a.selected_channel)for an=1,a.selection_start-1 do new_buffer:set_sample_data(l,an,a.buffer:sample_data(l,an))end;for an=a.selection_start,a.selection_end do new_buffer:set_sample_data(l,an,am(an))end;for an=a.selection_end+1,a.number_of_frames do new_buffer:set_sample_data(l,an,a.buffer:sample_data(l,an))end end end;return al end;function xSampleBuffer.extend(...)TRACE("xSampleBuffer.extend(...)")local a=xSampleBuffer.parse_processing_args(...)assert(type(a.extend_by)=="number")local al=function(new_buffer)local ao=a.extend_by<=0;local ap=ao and math.abs(a.extend_by)or 0;for l=1,a.number_of_channels do if ao then for an=1,math.abs(a.extend_by)do new_buffer:set_sample_data(l,an,0)end end;for an=1,a.number_of_frames do new_buffer:set_sample_data(l,an+ap,a.buffer:sample_data(l,an))end;if not ao then for an=a.number_of_frames+1,a.extend_by do new_buffer:set_sample_data(l,an,0)end end end end;return al end;function xSampleBuffer.sweep_ins(...)TRACE("xSampleBuffer.sweep_ins(...)")local a=xSampleBuffer.parse_processing_args(...)if a.selected_channel==renoise.SampleBuffer.CHANNEL_LEFT_AND_RIGHT then return xSampleBuffer.ins_in_all_ch(...)else return xSampleBuffer.ins_in_one_ch(...)end end;function xSampleBuffer.ins_in_all_ch(...)TRACE("xSampleBuffer.ins_in_all_ch(...)")local a=xSampleBuffer.parse_processing_args(...)local aq=a.number_of_frames+a.range;local al=function(new_buffer)for l=1,a.number_of_channels do for an=1,a.selection_start-1 do new_buffer:set_sample_data(l,an,a.buffer:sample_data(l,an))end;for an=a.selection_start,a.selection_end do new_buffer:set_sample_data(l,an,0)end;for an=a.selection_end+1,aq do new_buffer:set_sample_data(l,an,a.buffer:sample_data(l,an-a.range))end end end;return al end;function xSampleBuffer.ins_in_one_ch(...)TRACE("xSampleBuffer.ins_in_one_ch(...)")local a=xSampleBuffer.parse_processing_args(...)local aq=a.number_of_frames+a.range;local s,t;s=xSampleBuffer.CH_UTIL[a.number_of_channels][a.selected_channel][1][1]t=xSampleBuffer.CH_UTIL[a.number_of_channels][a.selected_channel][1][2]local al=function(new_buffer)for an=1,a.selection_start-1 do new_buffer:set_sample_data(s,an,a.buffer:sample_data(s,an))end;for an=a.selection_start,a.selection_end do new_buffer:set_sample_data(s,an,0)end;for an=a.selection_end+1,aq do new_buffer:set_sample_data(s,an,a.buffer:sample_data(s,an-a.range))end;for an=1,a.number_of_frames do new_buffer:set_sample_data(t,an,a.buffer:sample_data(t,an))end;for an=a.number_of_frames+1,aq do new_buffer:set_sample_data(t,an,0)end end;return al end;function xSampleBuffer.get_frame_generator_fn(c,l,ar,b,g,i,as)if l==as or as==renoise.SampleBuffer.CHANNEL_LEFT_AND_RIGHT then return function(an)local e=(an-g)/i;return c(xSampleBuffer.mod_fn_shaped(ar)(e),l)end else return function(an)return b:sample_data(l,an)end end end;function xSampleBuffer.empty_smple(...)TRACE("xSampleBuffer.empty_smple(...)")local a=xSampleBuffer.parse_processing_args(...)local al=function(new_buffer)for l=1,a.number_of_channels do for an=1,a.number_of_frames do new_buffer:set_sample_data(l,an,0)end end end;return al end;function xSampleBuffer.trim(...)TRACE("xSampleBuffer.trim(...)")local a=xSampleBuffer.parse_processing_args(...)local al=function(new_buffer)if a.range~=new_buffer.number_of_frames then error("Buffer length mismatch",a.range,new_buffer.number_of_frames)end;local ac=a.selection_start-1;for l=1,a.number_of_channels do for an=1,a.range do new_buffer:set_sample_data(l,an,a.buffer:sample_data(l,an+ac))end end end;return al end;function xSampleBuffer.sync_del(...)TRACE("xSampleBuffer.sync_del(...)")local a=xSampleBuffer.parse_processing_args(...)if a.selected_channel==renoise.SampleBuffer.CHANNEL_LEFT_AND_RIGHT then return xSampleBuffer.del_in_all_ch(...)else return xSampleBuffer.del_in_one_ch(...)end end;function xSampleBuffer.del_in_all_ch(...)TRACE("xSampleBuffer.del_in_all_ch(...)",...)local a=xSampleBuffer.parse_processing_args(...)local aq=a.number_of_frames-a.range;if aq<=0 then return xSampleBuffer.empty_smple(...)end;local al=function(new_buffer)for l=1,a.number_of_channels do for an=1,a.selection_start-1 do new_buffer:set_sample_data(l,an,a.buffer:sample_data(l,an))end;for an=a.selection_start,aq do new_buffer:set_sample_data(l,an,a.buffer:sample_data(l,an+a.range))end end end;return al end;function xSampleBuffer.del_in_one_ch(...)TRACE("xSampleBuffer.del_in_one_ch(...)")local a=xSampleBuffer.parse_processing_args(...)local s,t;local q={{0,0,{{1,1},1}},{{{1,2},1},{{2,1},1},{{1,2},2}}}s=q[a.number_of_channels][a.selected_channel][1][1]t=q[a.number_of_channels][a.selected_channel][1][2]local al=function()if a.selection_start>1 then for an=1,a.selection_start-1 do new_buffer:set_sample_data(s,an,a.buffer:sample_data(s,an))end end;for an=a.selection_start,a.number_of_frames-a.range do new_buffer:set_sample_data(s,an,a.buffer:sample_data(s,an+a.range))end;if a.number_of_frames-a.range+1<a.number_of_frames then for an=a.number_of_frames-a.range+1,a.number_of_frames do new_buffer:set_sample_data(s,an,0)end end;for an=1,a.number_of_frames do new_buffer:set_sample_data(t,an,a.buffer:sample_data(t,an))end end;return al end;function xSampleBuffer.phase_shift(...)TRACE("xSampleBuffer.phase_shift(...)",...)local a=xSampleBuffer.parse_processing_args(...)a.frame=math.floor(a.frame)local at=cLib.round_with_precision(math.fmod(math.fmod(a.frame,a.range)+a.range,a.range))if at==0 then return nil end;local au=function(at,l)if l==a.buffer.selected_channel or a.buffer.selected_channel==renoise.SampleBuffer.CHANNEL_LEFT_AND_RIGHT then return at else return 0 end end;local al=function(new_buffer)TRACE("[phase_shift] do_process - new_buffer",new_buffer)if a.selection_start>1 then for l=1,a.number_of_channels do for an=1,a.selection_start-1 do new_buffer:set_sample_data(l,an,a.buffer:sample_data(l,an))end end end;if a.selection_end<a.number_of_frames then for l=1,a.buffer.number_of_channels do for an=a.selection_end+1,a.number_of_frames do new_buffer:set_sample_data(l,an,a.buffer:sample_data(l,an))end end end;for l=1,a.number_of_channels do for an=a.selection_start+au(at,l),a.selection_end do new_buffer:set_sample_data(l,an-au(at,l),a.buffer:sample_data(l,an))end end;for l=1,a.number_of_channels do if au(at,l)>=1 then for an=a.selection_start,a.selection_start+au(at,l)-1 do new_buffer:set_sample_data(l,an+a.range-au(at,l),a.buffer:sample_data(l,an))end end end end;return al end;function xSampleBuffer.set_fade(...)TRACE("xSampleBuffer.set_fade(...)")local a=xSampleBuffer.parse_processing_args(...)assert(type(a.fn)=="function")if a.mod_fn then assert(type(a.mod_fn)=="function")end;local av=function(c,l,ar)if l==a.buffer.selected_channel or a.selected_channel==renoise.SampleBuffer.CHANNEL_LEFT_AND_RIGHT then return function(an)local e=(an-a.selection_start)/a.range;return c(xSampleBuffer.mod_fn_shaped(ar)(e),l)end else return function()return 1 end end end;local al=function(new_buffer)for l=1,a.number_of_channels do local am=av(a.fn,l,a.mod_fn)for an=1,a.selection_start-1 do new_buffer:set_sample_data(l,an,a.buffer:sample_data(l,an))end;for an=a.selection_start,a.selection_end do new_buffer:set_sample_data(l,an,am(an)*a.buffer:sample_data(l,an))end;for an=a.selection_end+1,a.number_of_frames do new_buffer:set_sample_data(l,an,a.buffer:sample_data(l,an))end end end;return al end