cLib.require(_clibroot.."cConvert")cLib.require(_xlibroot.."xNoteColumn")cLib.require(_xlibroot.."xSampleBuffer")cLib.require(_xlibroot.."xSampleBufferOperation")class'xSample'xSample.SAMPLE_CONVERT={MONO_MIX=1,MONO_LEFT=2,MONO_RIGHT=3,STEREO=4,SWAP=5}function xSample:__init(...)TRACE("xSample:__init(...)",...)local a=cLib.unpack_args(...)self.name=a.name or""self.sample_buffer=xSampleBuffer(a.sample_buffer)self.sample_mapping=xSampleMapping(a.sample_mapping)end;function xSample.get_display_name(b,c)TRACE("xSample.get_display_name(sample,sample_idx)",b,c)assert(type(b)=="Sample")assert(type(c)=="number")return b.name==""and("Sample %02X"):format(c-1)or b.name end;function xSample.set_loop_all(b,d)TRACE("xSample.set_loop_all()",b,d)assert(type(b)=="Sample")local e=xSample.get_sample_buffer(b)if e then xSample.set_loop_pos(b,1,e.number_of_frames)b.loop_mode=d or renoise.Sample.LOOP_MODE_OFF end end;function xSample.is_fully_looped(b)TRACE("xSample.is_fully_looped()",b)assert(type(b)=="Sample")local e=xSample.get_sample_buffer(b)if e then return b.loop_start==1 and b.loop_end==e.number_of_frames end end;function xSample.set_loop_pos(b,f,g)TRACE("xSample.set_loop_pos(sample,start_pos,end_pos)",b,f,g)local e=xSample.get_sample_buffer(b)if not e then return end;local f,g=math.min(f,g),math.max(f,g)f=math.max(1,f)g=math.min(e.number_of_frames,g)if f>b.loop_end then b.loop_end=g;b.loop_start=f else b.loop_start=f;b.loop_end=g end end;function xSample.set_loop_to_selection(b,d)TRACE("xSample:set_loop_to_selection(sample)",b)local e=xSample.get_sample_buffer(b)if e then xSample.set_loop_pos(b,e.selection_start,e.selection_end)if d then b.loop_mode=d end end end;function xSample.clear_loop(b)TRACE("xSample.clear_loop(sample)",b)local e=xSample.get_sample_buffer(b)if e then xSample.set_loop_pos(b,1,e.number_of_frames)b.loop_mode=renoise.Sample.LOOP_MODE_OFF end end;function xSample.get_sample_buffer(b)TRACE("xSample.get_sample_buffer(sample)",b)if b.sample_buffer and b.sample_buffer.has_sample_data then return b.sample_buffer end end;function xSample.convert_sample(h,c,a,i)TRACE("xSample.convert_sample(instr_idx,sample_idx,args,callback)",h,c,a,i)local j=rns.instruments[h]assert(type(j)=="Instrument")local b=j.samples[c]assert(type(b)=="Sample")local e=b.sample_buffer;if not e.has_sample_data then return false end;if not a.range then a.range={start_frame=1,end_frame=e.number_of_frames}end;local k=a.range.end_frame-a.range.start_frame+1;local l=e.number_of_channels;local m=1;if a.channel_action then l=a.channel_action==xSample.SAMPLE_CONVERT.STEREO and 2 or 1;if a.channel_action==xSample.SAMPLE_CONVERT.MONO_RIGHT then m=2 end end;local n=function(o)local p=nil;local q=1;local r=a.range.start_frame;local s=a.range.start_frame+k-1;for t=r,s do if not a.channel_action then o:set_sample_data(1,q,e:sample_data(1,t))if l==2 then o:set_sample_data(2,q,e:sample_data(2,t))end elseif a.channel_action==xSample.SAMPLE_CONVERT.MONO_MIX then else p=e:sample_data(m,t)o:set_sample_data(1,q,p)if l==2 then p=e:sample_data(m,t)o:set_sample_data(2,q,p)end end;q=q+1 end end;xSampleBufferOperation.run({instrument_index=h,sample_index=c,force_bit_depth=a.bit_depth,force_channels=l,force_frames=k,operations={n},on_complete=function(u)i(u.sample)end,on_error=function(v)TRACE("*** error message",v)end})end;function xSample.get_name_tokens(w)TRACE("xSample.get_name_tokens(str)",w)local x=w:gmatch("(.*): (.*) %((.*)%)[_%s]?([^_%s]*)[_%s]?([A-Z]*[-#]?[%d]*)")local y,z,A,B,C=x()local D=C~=""and xNoteColumn.note_string_to_value(C)local E=B and xNoteColumn.note_string_to_value(B)local F=B and tonumber(B)if D then return{plugin_type=y,plugin_name=z,preset_name=A,velocity=F and B,note=C}elseif F then return{plugin_type=y,plugin_name=z,preset_name=A,velocity=B}elseif E then return{plugin_type=y,plugin_name=z,preset_name=A,note=B~=""and B or nil}elseif A then return{plugin_type=y,plugin_name=z,preset_name=A}else local x=w:gmatch("(.-)[_%s]?([^_%s]*)[_%s]?([A-Z]*[-#]?[%d]*)$")local y,z,A=x()local G=A and xNoteColumn.note_string_to_value(A)local H=z and xNoteColumn.note_string_to_value(z)local I=z and tonumber(z)if y==""then return{sample_name=z}elseif G then return{sample_name=y,velocity=z,note=A~=""and A or nil}elseif I then return{sample_name=y,velocity=z}elseif H then return{sample_name=y,note=z~=""and z or nil}else return{sample_name=y}end end;return{}end;function xSample.get_buffer_frame_by_notepos(b,J,g,K)TRACE("xSample.get_buffer_frame_by_notepos(sample,trigger_pos,end_pos,ignore_sxx)",b,J,g,K)assert(type(b)=="Sample")assert(type(J)=="xCursorPos")assert(type(g)=="xCursorPos")local L,M,N,O,P=J:resolve()if not P then return false,"Could not resolve pattern-line"end;local Q=P.note_columns[J.column]if not Q then return false,"Could not resolve note-column"end;local R=xSongPos.get_line_diff(J,g)if N.delay_column_visible then if Q.delay_value>0 then R=R-Q.delay_value/255 end end;R=R+cLib.fraction(g.line)local S=xSampleBuffer.get_frame_by_line(b.sample_buffer,R)local T=nil;if b.beat_sync_enabled then T=xSample.get_beatsynced_note(b)else T=xSample.get_transposed_note(b,Q.note_value)end;S=xSample.get_transposed_frame(T,S)if not K and b.sample_buffer.has_sample_data then local U=xLinePattern.get_effect_command(N,P,"0S",J.column,true)if not table.is_empty(U)then local V=b.sample_buffer.number_of_frames;local W=U[#U].amount_value;S=S+V/256*W end end;return S,Q end;function xSample.get_transposed_frame(T,S)TRACE("xSample.get_transposed_frame(note_value,frame)",T,S)assert(type(T)=="number")assert(type(S)=="number")local X=cConvert.note_to_hz(T)local Y=cConvert.note_to_hz(48)local Z=Y/X;S=S/Z;return S end;function xSample.get_transposed_note(b,_)TRACE("xSample.get_transposed_note(sample,played_note)",b,_)assert(type(b)=="Sample")if not _ then _=0 end;local a0=b.sample_mapping.base_note;local a1=b.transpose+b.fine_tune/128;return 48+_-a0+a1 end;function xSample.get_lines_spanned(b,T,a2)TRACE("xSample.get_lines_spanned(sample,note_value)",b,T)assert(type(b)=="Sample")local e=xSample.get_sample_buffer(b)if not a2 then assert(type(e)=="SampleBuffer")a2=e.number_of_frames end;local a3=xSample.get_transposed_frame(T,a2)local a4=xSampleBuffer.get_frame_by_line(e,1)local a5=a3/a4;return a5 end;function xSample.get_beatsynced_factor(b)TRACE("xSample.get_beatsynced_factor(sample)",b)assert(type(b)=="Sample")local T=b.sample_mapping.base_note;local a5=xSample.get_lines_spanned(b,T)local a6=a5/b.beat_sync_lines;return a6 end;function xSample.get_beatsynced_note(b)TRACE("xSample.get_beatsynced_note(sample)",b)assert(type(b)=="Sample")if not b.beat_sync_enabled then return end;local a7=48-b.sample_mapping.base_note+48;local a8=cConvert.note_to_hz(a7)local a6=xSample.get_beatsynced_factor(b)local a9,aa=cConvert.hz_to_note(a8*a6)return a9+aa/100 end