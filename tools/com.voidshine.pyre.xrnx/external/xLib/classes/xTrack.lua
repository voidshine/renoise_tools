cLib.require(_xlibroot.."xPatternSequencer")class'xTrack'function xTrack.get_master_track_index()TRACE("xTrack.get_master_track_index()")for a,b in pairs(rns.tracks)do if b.type==renoise.Track.TRACK_TYPE_MASTER then return a end end end;function xTrack.get_master_track()TRACE("xTrack.get_master_track()")for a,b in pairs(rns.tracks)do if b.type==renoise.Track.TRACK_TYPE_MASTER then return b end end end;function xTrack.get_send_track(c)TRACE("xTrack.get_send_track(send_index)",c)if c<=rns.send_track_count then local d=rns.sequencer_track_count+1+c;return rns:track(d)else return nil end end;function xTrack:any_track_is_soloed()TRACE("xTrack:any_track_is_soloed()")for b,e in ipairs(rns.tracks)do if e.solo_state then return true end end;return false end;function xTrack.get_tracks_by_type(f)TRACE("xTrack.get_tracks_by_type(track_type)",f)local g={}for h,b in ipairs(rns.tracks)do if b.type==f then table.insert(g,h)end end;return g end;function xTrack.get_group_track_index(i,j)TRACE("xTrack.get_group_track_index(track_idx)",i,j)local k=rns.tracks[i]local l=k.group_parent;if not l and k.type==renoise.Track.TRACK_TYPE_GROUP then return i end;for h,b in ipairs(rns.tracks)do if rawequal(b,l)then return h end end end;function xTrack.get_first_sequencer_track_in_group(i)TRACE("xTrack.get_first_sequencer_track_in_group(track_idx)",i)local m=rns.tracks[i]if m.type~=renoise.Track.TRACK_TYPE_GROUP then return nil,"Expected a group track as argument"end;for h,b in ipairs(rns.tracks)do if rawequal(b.group_parent,m)then return h end end end;function xTrack.determine_track_type(i)TRACE("xTrack.determine_track_type(track_idx)",i)local n=xTrack.get_master_track_index()local o=rns.tracks;if i<n then local e=rns.tracks[i]return e.type elseif i==n then return renoise.Track.TRACK_TYPE_MASTER elseif i<=#o then return renoise.Track.TRACK_TYPE_SEND end end;function xTrack.jump_to_next_sequencer_track(i,p)rns.selected_track_index=xTrack.get_next_sequencer_track(i,p)end;function xTrack.get_next_sequencer_track(i,p)TRACE("xTrack.get_next_sequencer_track(track_idx,wrap_pattern)",i,p)i=i or rns.selected_track_index;p=p or true;local n=xTrack.get_master_track_index()local q=false;repeat i=i+1;if i>=n then if p then i=1 else return end end;local f=xTrack.determine_track_type(i)if f==renoise.Track.TRACK_TYPE_SEQUENCER then q=true end until q;return i end;function xTrack.jump_to_previous_sequencer_track(i,p)rns.selected_track_index=xTrack.get_previous_sequencer_track(i,p)end;function xTrack.get_previous_sequencer_track(i,p)TRACE("xTrack.get_previous_sequencer_track(track_idx,wrap_pattern)",i,p)i=i or rns.selected_track_index;p=p or true;local q=false;repeat i=i-1;if i==0 then if p then i=xTrack.get_master_track_index()else return false end end;local f=xTrack.determine_track_type(i)if f==renoise.Track.TRACK_TYPE_SEQUENCER then q=true end until q;return i end;function xTrack.jump_to_next_track(i,p)rns.selected_track_index=xTrack.get_next_track(i,p)end;function xTrack.get_next_track(i,p)TRACE("xTrack.get_next_track(track_idx,wrap_pattern)",i,p)i=i or rns.selected_track_index;p=p==nil and false or p;i=i+1;if i>#rns.tracks then if p then i=1 else i=#rns.tracks end end;return i end;function xTrack.jump_to_previous_track(i,p)rns.selected_track_index=xTrack.get_previous_track(i,p)end;function xTrack.get_previous_track(i,p)TRACE("xTrack.get_previous_track(track_idx,wrap_pattern)",i,p)i=i or rns.selected_track_index;p=p==nil and false or p;i=i-1;if i<1 then if p then i=#rns.tracks else i=1 end end;return i end;function xTrack:get_pattern_track(r,d)TRACE("xTrack:get_pattern_track(seq_idx,trk_idx)",r,d)local s=xPatternSequencer.get_pattern_at_index(r)if not s then return false,"Could not locate pattern"end;local t=s:track(d)if not t then return nil,"Could not locate pattern-track"end;return t end;function xTrack.get_selected_column_index()TRACE("xTrack.get_selected_column_index()")if rns.selected_note_column then return rns.selected_note_column_index else local e=rns.selected_track;return rns.selected_note_column_index+e.visible_note_columns end end;function xTrack.set_selected_column_index(e,u)TRACE("xTrack.set_selected_column_index(track,col_idx)",e,u)if e.type==renoise.Track.TRACK_TYPE_SEQUENCER and e.visible_note_columns>=u then rns.selected_note_column_index=u elseif u<e.visible_note_columns+e.visible_effect_columns then rns.selected_effect_column_index=u-e.visible_note_columns else return"Can't select this effect column (out of bounds)"end end;function xTrack.set_column_mute(u)TRACE("xTrack.set_column_mute(col_idx)",u)local i=rns.selected_track_index;if i<xTrack.get_master_track_index()then for a=1,12 do local v=a>u;if renoise.API_VERSION>4 then rns.tracks[i]:set_column_is_muted(a,v)else rns.tracks[i]:mute_column(a,v)end end end end;function xTrack.get_device_index(e,w)TRACE("xTrack.get_device_index(track,device)",e,w)assert(type(e)=="Track")assert(type(w)=="AudioDevice")for h,b in ipairs(e.devices)do if rawequal(b,w)then return h end end end