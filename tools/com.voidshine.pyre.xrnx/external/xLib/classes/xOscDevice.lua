cLib.require(_clibroot.."cDocument")class'xOscDevice'(cDocument)xOscDevice.DOC_PROPS={active="boolean",name="string",prefix="string",address="string",port_in="number",port_out="number"}xOscDevice.DEFAULT_DEVICE_NAME="Untitled device"function xOscDevice:__init(...)local a=cLib.unpack_args(...)self.active=property(self.get_active,self.set_active)self.active_observable=renoise.Document.ObservableBoolean(a.active or false)self.name=property(self.get_name,self.set_name)self.name_observable=renoise.Document.ObservableString(a.name or"")self.prefix=property(self.get_prefix,self.set_prefix)self.prefix_observable=renoise.Document.ObservableString(a.prefix or"")self.address=property(self.get_address,self.set_address)self.address_observable=renoise.Document.ObservableString(a.address or"")self.port_in=property(self.get_port_in,self.set_port_in)self.port_in_observable=renoise.Document.ObservableNumber(a.port_in or 0)self.port_out=property(self.get_port_out,self.set_port_out)self.port_out_observable=renoise.Document.ObservableNumber(a.port_out or 0)self.callback=property(self.get_callback,self.set_callback)self._callback=a.callback;self.bundling_enabled=property(self.get_bundling_enabled,self.set_bundling_enabled)self.bundling_enabled_observable=renoise.Document.ObservableBoolean(a.bundling_enabled or false)self.bundle_limit=property(self.get_bundle_limit,self.set_bundle_limit)self.bundle_limit_observable=renoise.Document.ObservableNumber(a.bundle_limit or 0)self.modified_observable=renoise.Document.ObservableBang()self.idle_notifier=nil;self.message_queue={}self.client=nil;self.server=nil;renoise.tool().app_idle_observable:add_notifier(function()self:on_idle()end)end;function xOscDevice:get_active()return self.active_observable.value end;function xOscDevice:set_active(b)assert(type(b)=="boolean","Expected active to be a boolean")local c=b~=self.active_observable.value;self.active_observable.value=b;if c then if not b then self:close()else self._initialize_requested=true end;self.modified_observable:bang()end end;function xOscDevice:get_name()return self.name_observable.value end;function xOscDevice:set_name(b)assert(type(b)=="string","Expected name to be a string")local c=b~=self.name_observable.value;self.name_observable.value=b;if c then self.modified_observable:bang()end end;function xOscDevice:get_prefix()return self.prefix_observable.value end;function xOscDevice:set_prefix(b)assert(type(b)=="string","Expected prefix to be a string")local c=b~=self.prefix_observable.value;self.prefix_observable.value=b;if c then self.modified_observable:bang()end end;function xOscDevice:get_address()return self.address_observable.value end;function xOscDevice:set_address(b)assert(type(b)=="string","Expected address to be a string")local c=b~=self.address_observable.value;self.address_observable.value=b;if c then self._initialize_requested=true;self.modified_observable:bang()end end;function xOscDevice:get_port_in()return self.port_in_observable.value end;function xOscDevice:set_port_in(b)assert(type(b)=="number","Expected port_in to be a number")if b>xLib.MAX_OSC_PORT or b<xLib.MIN_OSC_PORT then local d="Cannot set to a port number outside this range: %d-%d"error(d:format(xLib.MAX_OSC_PORT,xLib.MIN_OSC_PORT))end;local c=b~=self.port_in_observable.value;self.port_in_observable.value=b;if c then self._initialize_requested=true;self.modified_observable:bang()end end;function xOscDevice:get_port_out()return self.port_out_observable.value end;function xOscDevice:set_port_out(b)assert(type(b)=="number","Expected port_out to be a number")if b>xLib.MAX_OSC_PORT or b<xLib.MIN_OSC_PORT then local d="Cannot set to a port number outside this range: %d-%d"error(d:format(xLib.MAX_OSC_PORT,xLib.MIN_OSC_PORT))end;local c=b~=self.port_out_observable.value;self.port_out_observable.value=b;if c then self._initialize_requested=true;self.modified_observable:bang()end end;function xOscDevice:get_callback()return self._callback end;function xOscDevice:set_callback(b)assert(type(b)=="function","Expected callback to be a function")self._callback=b end;function xOscDevice:get_bundling_enabled()return self.bundling_enabled_observable.value end;function xOscDevice:set_bundling_enabled(b)assert(type(b)=="boolean","Expected bundling_enabled to be a boolean")self.bundling_enabled_observable.value=b end;function xOscDevice:get_bundle_limit()return self.bundle_limit_observable.value end;function xOscDevice:set_bundle_limit(b)assert(type(b)=="number","Expected bundle_limit to be a number")self.bundle_limit_observable.value=b end;function xOscDevice:open()if self.active then self:close()end;assert(not self.client or not self.server,"Internal Error. Please report: ".."trying to start an OSC service which is already active")local e,f=renoise.Socket.create_client(self.address,self.port_out,renoise.Socket.PROTOCOL_UDP)if f then renoise.app():show_warning(("Failed to start the ".."OSC client for device '%s'. Error: '%s'"):format(self.name,f))self.client=nil;return else self.client=e end;local g,f=renoise.Socket.create_server(self.port_in,renoise.Socket.PROTOCOL_UDP)if f then renoise.app():show_warning(("Failed to start the ".."OSC server for device '%s'. Error: '%s'"):format(self.name,f))self.server=nil;return else self.server=g;self.server:run(self)end end;function xOscDevice:close()if self.client and self.client.is_open then self.client:close()self.client=nil end;if self.server and self.server.is_open then if self.server.is_running then self.server:stop()end;self.server:close()self.server=nil end end;function xOscDevice:_unpack_messages(h,i)if type(h)=="Message"then i:insert(h)elseif type(h)=="Bundle"then for j,k in pairs(h.elements)do self:_unpack_messages(k,i)end else error("Internal Error: unexpected argument for unpack_messages: ".."expected an osc bundle or message")end end;function xOscDevice:socket_error(l)LOG(("xOscDevice: socket error: '%s'"):format(osc_error))end;function xOscDevice:socket_message(m,n)if not self.active then LOG("*** xOscDevice - ignoring messages while inactive")return end;local h,osc_error=renoise.Osc.from_binary_data(n)if h then local i=table.create()self:_unpack_messages(h,i)for j,d in pairs(i)do if self.callback then if self.prefix~=""then local o=string.sub(d.pattern,0,string.len(self.prefix))if o~=self.prefix then LOG("*** xOscDevice - ignoring message with invalid prefix",d.pattern)return end;local p=string.sub(d.pattern,string.len(self.prefix)+1)d=renoise.Osc.Message(p,d.arguments)end;self.callback(d)end end else LOG(("xOscDevice: Got invalid OSC data, or data which is not ".."OSC data at all. Error: '%s'"):format(osc_error))end end;function xOscDevice:send(q)if not self.client or not self.client.is_open then LOG("Could not send OSC message - device is not ready")return false end;local o=string.sub(q.pattern.osc_pattern_out,0,string.len(self.prefix))if o~=self.prefix then q.pattern.osc_pattern_out=self.prefix..q.pattern.osc_pattern_out end;local d=q:create_raw_message()if not self.bundling_enabled then self.client:send(d)else table.insert(self.message_queue,d)if self.bundle_limit>0 and#self.message_queue>self.bundle_limit then self:send_bundle()end end;return true end;function xOscDevice:send_bundle()if not self.client or not self.client.is_open then LOG("Could not send OSC message - device is not ready")return false end;local r=renoise.Osc.Bundle(os.clock(),self.message_queue)self.message_queue={}end;function xOscDevice:on_idle()if self._initialize_requested then if not self.active then return end;self._initialize_requested=false;self:close()self:open()end;if not table.is_empty(self.message_queue)then self:send_bundle()end end;function xOscDevice:__tostring()return type(self)..", active:"..tostring(self.active_observable.value)..", name:"..tostring(self.name_observable.value)..", prefix:"..tostring(self.prefix_observable.value)..", address:"..tostring(self.address_observable.value)..", port_in:"..tostring(self.port_in_observable.value)..", port_out:"..tostring(self.port_out_observable.value)end