cLib.require(_clibroot.."cPersistence")cLib.require(_xlibroot.."xAudioDevice")cLib.require(_xlibroot.."xTrack")class'xAudioDeviceAutomation'(cPersistence)xAudioDeviceAutomation.__PERSISTENCE={"device_path","parameters"}function xAudioDeviceAutomation:__init()TRACE("xAudioDeviceAutomation:__init()")self.device_path=nil;self.parameters={}self.number_of_lines=property(self._get_number_of_lines)end;function xAudioDeviceAutomation:has_points()TRACE("xAudioDeviceAutomation:has_points()")local a=false;for b,c in ipairs(self.parameters)do if c.envelope and c.envelope:has_points()then a=true;break end end;return a end;function xAudioDeviceAutomation:_get_number_of_lines()TRACE("xAudioDeviceAutomation:_get_number_of_lines()")for b,c in ipairs(self.parameters)do if c.envelope and c.envelope:has_points()then return c.envelope.number_of_lines end end;error("Error: should not get here (automation without points)")end;function xAudioDeviceAutomation:compatible_with_device_path(d)assert(type(d)=="AudioDevice")return d.device_path==self.device_path end;function xAudioDeviceAutomation:assign_definition(e)TRACE("xAudioDeviceAutomation:assign_definition(t)",e)self.device_path=e.device_path;self.parameters={}for b,c in ipairs(e.parameters)do local f={name=c.name,index=c.index,envelope=xEnvelope()}f.envelope:assign_definition(c.envelope)table.insert(self.parameters,f)end end;function xAudioDeviceAutomation:__tostring()return type(self)..":device_path="..tostring(self.device_path)..",parameters="..tostring(self.parameters)end