cLib.require(_xlibroot.."xLinePattern")class'xNoteColumn'xNoteColumn.EMPTY_NOTE_VALUE=121;xNoteColumn.EMPTY_NOTE_STRING="---"xNoteColumn.NOTE_OFF_VALUE=120;xNoteColumn.NOTE_OFF_STRING="OFF"xNoteColumn.EMPTY_VOLUME_VALUE=255;xNoteColumn.EMPTY_COLUMN_STRING=".."xNoteColumn.tokens={"note_value","note_string","instrument_value","instrument_string","volume_value","volume_string","panning_value","panning_string","delay_value","delay_string","effect_number_value","effect_number_string","effect_amount_value","effect_amount_string"}xNoteColumn.output_tokens={"note_value","instrument_value","volume_value","panning_value","delay_value","effect_number_value","effect_amount_value"}xNoteColumn.subcolumn_tokens={"volume_value","panning_value","delay_value","effect_number_value","effect_amount_value"}xNoteColumn.NOTE_ARRAY={"C-","C#","D-","D#","E-","F-","F#","G-","G#","A-","A#","B-"}function xNoteColumn:__init(a)self.note_value=property(self.get_note_value,self.set_note_value)self._note_value=nil;self.note_string=property(self.get_note_string,self.set_note_string)self._note_string=nil;self.instrument_value=property(self.get_instrument_value,self.set_instrument_value)self._instrument_value=nil;self.instrument_string=property(self.get_instrument_string,self.set_instrument_string)self._instrument_string=nil;self.volume_value=property(self.get_volume_value,self.set_volume_value)self._volume_value=nil;self.volume_string=property(self.get_volume_string,self.set_volume_string)self._volume_string=nil;self.panning_value=property(self.get_panning_value,self.set_panning_value)self._panning_value=nil;self.panning_string=property(self.get_panning_string,self.set_panning_string)self._panning_string=nil;self.delay_value=property(self.get_delay_value,self.set_delay_value)self._delay_value=nil;self.delay_string=property(self.get_delay_string,self.set_delay_string)self._delay_string=nil;self.effect_number_value=property(self.get_effect_number_value,self.set_effect_number_value)self._effect_number_value=nil;self.effect_number_string=property(self.get_effect_number_string,self.set_effect_number_string)self._effect_number_string=nil;self.effect_amount_value=property(self.get_effect_amount_value,self.set_effect_amount_value)self._effect_amount_value=nil;self.effect_amount_string=property(self.get_effect_amount_string,self.set_effect_amount_string)self._effect_amount_string=nil;if type(a)=="xNoteColumn"then for b,c in pairs(xNoteColumn.output_tokens)do if a[c]then self[c]=a[c]end end elseif type(a)=="table"and not table.is_empty(a)then for b,c in pairs(xNoteColumn.tokens)do if a[c]then self[c]=a[c]end end end end;function xNoteColumn:get_note_value()return self._note_value end;function xNoteColumn:set_note_value(d)self._note_value=d;self._note_string=xNoteColumn.note_value_to_string(d)end;function xNoteColumn:get_note_string()return self._note_string end;function xNoteColumn:set_note_string(e)self._note_string=string.upper(e)self._note_value=xNoteColumn.note_string_to_value(e)end;function xNoteColumn:get_instrument_value()return self._instrument_value end;function xNoteColumn:set_instrument_value(d)self._instrument_value=d;self._instrument_string=xNoteColumn.instr_value_to_string(d)end;function xNoteColumn:get_instrument_string()return self._instrument_string end;function xNoteColumn:set_instrument_string(e)self._instrument_string=e;self._instrument_value=xNoteColumn.instr_string_to_value(e)end;function xNoteColumn:get_volume_value()return self._volume_value end;function xNoteColumn:set_volume_value(d)self._volume_value=d;self._volume_string=xNoteColumn.column_value_to_string(d)end;function xNoteColumn:get_volume_string()return self._volume_string end;function xNoteColumn:set_volume_string(e)self._volume_string=e;self._volume_value=xNoteColumn.column_string_to_value(e)end;function xNoteColumn:get_panning_value()return self._panning_value end;function xNoteColumn:set_panning_value(d)self._panning_value=d;self._panning_string=xNoteColumn.column_value_to_string(d)end;function xNoteColumn:get_panning_string()return self._panning_string end;function xNoteColumn:set_panning_string(e)self._panning_string=e;self._panning_value=xNoteColumn.column_string_to_value(e)end;function xNoteColumn:get_delay_value()return self._delay_value end;function xNoteColumn:set_delay_value(d)self._delay_value=d;self._delay_string=xNoteColumn.delay_value_to_string(d)end;function xNoteColumn:get_delay_string()return self._delay_string end;function xNoteColumn:set_delay_string(e)self._delay_string=e;self._delay_value=xNoteColumn.delay_string_to_value(e,xLinePattern.EMPTY_VALUE)end;function xNoteColumn:get_effect_number_value()return self._effect_number_value end;function xNoteColumn:set_effect_number_value(d)self._effect_number_value=d;self._effect_number_string=xEffectColumn.number_value_to_string(d)end;function xNoteColumn:get_effect_number_string()return self._effect_number_string end;function xNoteColumn:set_effect_number_string(e)self._effect_number_string=e;self._effect_number_value=xEffectColumn.number_string_to_value(e)end;function xNoteColumn:get_effect_amount_value()return self._effect_amount_value end;function xNoteColumn:set_effect_amount_value(d)self._effect_amount_value=d;self._effect_amount_string=xEffectColumn.amount_value_to_string(d)end;function xNoteColumn:get_effect_amount_string()return self._effect_amount_string end;function xNoteColumn:set_effect_amount_string(e)self._effect_amount_string=e;self._effect_amount_value=xEffectColumn.amount_string_to_value(e)end;function xNoteColumn.note_string_to_value(f)TRACE("xNoteColumn.note_string_to_value(str_val)",f,type(f))f=string.upper(f)local g=nil;local h=nil;if f==xNoteColumn.NOTE_OFF_STRING then return xNoteColumn.NOTE_OFF_VALUE elseif f==xNoteColumn.EMPTY_NOTE_STRING then return xNoteColumn.EMPTY_NOTE_VALUE end;local i=f:sub(0,2)for j,k in ipairs(xNoteColumn.NOTE_ARRAY)do if i==k then g=j-1;break end end;h=tonumber(f:sub(3))if not h then return xNoteColumn.EMPTY_NOTE_VALUE elseif not g then return xNoteColumn.EMPTY_NOTE_VALUE else return g+h*12,g,h end end;function xNoteColumn.note_value_to_string(d)TRACE("xNoteColumn.note_value_to_string(val)",d)d=math.floor(d)if not d then return nil elseif d==120 then return xNoteColumn.NOTE_OFF_STRING elseif d==121 then return xNoteColumn.EMPTY_NOTE_STRING elseif d==0 then return"C-0"else local l=math.floor(d/12)local g=xNoteColumn.NOTE_ARRAY[d%12+1]return string.format("%s%s",g,l)end end;function xNoteColumn.instr_string_to_value(e)TRACE("xNoteColumn.instr_string_to_value(str)",e)return e==".."and 255 or tonumber("0x"..e)or error("Invalid value")end;function xNoteColumn.instr_value_to_string(d)TRACE("xNoteColumn.instr_value_to_string(val)",d)return d==255 and".."or("%.2X"):format(d)end;function xNoteColumn.delay_string_to_value(e)TRACE("xNoteColumn.delay_string_to_value(str)",e)return e==".."and 0 or tonumber("0x"..e)or error("Invalid value")end;function xNoteColumn.delay_value_to_string(d)TRACE("xNoteColumn.delay_value_to_string(val)",d)return d==0 and".."or("%.2X"):format(d)end;function xNoteColumn.column_string_to_value(f)TRACE("xNoteColumn.column_string_to_value(str_val)",f)if f==".."then return xLinePattern.EMPTY_VALUE end;local m=tonumber("0x"..f)if m and m<=0x80 then return m else return xNoteColumn.convert_fx_to_value(f)end end;function xNoteColumn.column_value_to_string(d)TRACE("xNoteColumn.column_value_to_string(val)",d)if d==xLinePattern.EMPTY_VALUE then return".."end;local m=d<=0x80;if m then return("%.2X"):format(d)else return xNoteColumn.convert_fx_to_string(d)end end;function xNoteColumn.convert_fx_to_value(f)TRACE("xNoteColumn.convert_fx_to_value(str_val)",f)local n=string.sub(f,1,1)local o=string.sub(f,2,2)local p=table.find(xLinePattern.EFFECT_CHARS,n)-1;if p then return p*256+tonumber("0x"..o)end end;function xNoteColumn.convert_fx_to_string(d)TRACE("xNoteColumn.convert_fx_to_string(val)",d)local q=math.floor(d/256)local r=d-q*256;return("%s%X"):format(xLinePattern.EFFECT_CHARS[q+1],r)end;function xNoteColumn.do_read(s,t)TRACE("xNoteColumn.do_read(note_col,tokens)",s,t)if not t then t=xNoteColumn.tokens end;local u={}for b,k in ipairs(t)do u[k]=s[k]end;return u end;function xNoteColumn:do_write(s,t,v,w)if not t then t=xNoteColumn.output_tokens end;for b,c in ipairs(t)do if self["do_write_"..c]then local x=pcall(function()self["do_write_"..c](self,s,v)end)if not x then LOG("WARNING: xNoteColumn - Trying to write invalid value to property:",c,self[c])elseif w and table.find(xNoteColumn.subcolumn_tokens,c)then w(s,c)end end end end;function xNoteColumn:do_write_note_value(s,v)if self.note_value then s.note_value=self.note_value elseif v then s.note_value=xNoteColumn.EMPTY_NOTE_VALUE end end;function xNoteColumn:do_write_note_string(s,v)if self.note_string then s.note_string=self.note_string elseif v then s.note_string=xNoteColumn.EMPTY_NOTE_STRING end end;function xNoteColumn:do_write_instrument_value(s,v)if self.instrument_value then s.instrument_value=self.instrument_value elseif v then s.instrument_value=xLinePattern.EMPTY_VALUE end end;function xNoteColumn:do_write_instrument_string(s,v)if self.instrument_string then s.instrument_string=self.instrument_string elseif v then s.instrument_string=xNoteColumn.EMPTY_COLUMN_STRING end end;function xNoteColumn:do_write_volume_value(s,v)if self.volume_value then s.volume_value=self.volume_value elseif v then s.volume_value=xLinePattern.EMPTY_VALUE end end;function xNoteColumn:do_write_volume_string(s,v)if self.volume_string then s.volume_string=self.volume_string elseif v then s.volume_string=xNoteColumn.EMPTY_COLUMN_STRING end end;function xNoteColumn:do_write_panning_value(s,v)if self.panning_value then s.panning_value=self.panning_value elseif v then s.panning_value=xLinePattern.EMPTY_VALUE end end;function xNoteColumn:do_write_panning_string(s,v)if self.panning_string then s.panning_string=self.panning_string elseif v then s.panning_string=xNoteColumn.EMPTY_COLUMN_STRING end end;function xNoteColumn:do_write_delay_value(s,v)if self.delay_value then s.delay_value=self.delay_value elseif v then s.delay_value=0 end end;function xNoteColumn:do_write_delay_string(s,v)if self.delay_string then s.delay_string=self.delay_string elseif v then s.delay_string=xNoteColumn.EMPTY_COLUMN_STRING end end;function xNoteColumn:do_write_effect_number_value(s,v)if self.effect_number_value then s.effect_number_value=self.effect_number_value elseif v then s.effect_number_value=0 end end;function xNoteColumn:do_write_effect_number_string(s,v)if self.effect_number_string then s.effect_number_string=self.effect_number_string elseif v then s.effect_number_string=xLinePattern.EMPTY_STRING end end;function xNoteColumn:do_write_effect_amount_value(s,v)if self.effect_amount_value then s.effect_amount_value=self.effect_amount_value elseif v then s.effect_amount_value=0 end end;function xNoteColumn:do_write_effect_amount_string(s,v)if self.effect_amount_string then s.effect_amount_string=self.effect_amount_string elseif v then s.effect_amount_string=xLinePattern.EMPTY_STRING end end;function xNoteColumn.subcolumn_is_empty(s,c)local y={["volume_value"]=function()return s[c]==255 end,["panning_value"]=function()return s[c]==255 end,["delay_value"]=function()return s[c]==0 end,["effect_number_value"]=function()return s[c]==0 end,["effect_amount_value"]=function()return s[c]==0 end}if y[c]then return y[c]()end;error("Unexpected token - use `xNoteColumn.subcolumn_tokens`")end;function xNoteColumn:__tostring()return type(self)..", note="..tostring(self.note_string)..", instrument="..tostring(self.instrument_string)..", volume_string="..tostring(self.volume_string)..", panning="..tostring(self.panning_string)..", delay="..tostring(self.delay_string)..", effect_number="..tostring(self.effect_number_string)..", effect_amount="..tostring(self.effect_amount_string)end