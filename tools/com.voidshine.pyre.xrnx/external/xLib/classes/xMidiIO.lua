cLib.require(_clibroot.."cObservable")cLib.require(_xlibroot.."xLib")cLib.require(_xlibroot.."xMidiInput")class'xMidiIO'function xMidiIO:__init(...)TRACE("xMidiIO:__init(...)")local a=cLib.unpack_args(...)assert(type(a.midi_callback_fn)=="function","Required argument 'midi_callback_fn' missing")self.midi_inputs=property(self.get_midi_inputs,self.set_midi_inputs)self.midi_inputs_observable=renoise.Document.ObservableStringList()self.midi_outputs=property(self.get_midi_outputs,self.set_midi_outputs)self.midi_outputs_observable=renoise.Document.ObservableStringList()self.device_ports_changed_observable=renoise.Document.ObservableBang()self.interpretor=xMidiInput{multibyte_enabled=a.multibyte_enabled,nrpn_enabled=a.nrpn_enabled,terminate_nrpns=a.terminate_nrpns}self._midi_input_ports={}self._midi_output_ports={}if a.midi_inputs then self:set_midi_inputs(a.midi_inputs)end;if a.midi_outputs then self:set_midi_outputs(a.midi_outputs)end;self.interpretor.callback_fn=function(b)a.midi_callback_fn(b)end;renoise.Midi.devices_changed_observable():add_notifier(function()self:available_device_ports_changed()end)self:initialize_midi_devices()end;function xMidiIO:open_midi_input(c)TRACE("xMidiIO:open_midi_input(port_name)",c)assert(type(c),"string","Expected port_name to be a string")local d=renoise.Midi.available_input_devices()if table.find(d,c)then local e=self._midi_input_ports[c]~=nil;local f=e and self._midi_input_ports[c].is_open;if e and f then return elseif e and not f then self._midi_input_ports[c]:close()end;self._midi_input_ports[c]=renoise.Midi.create_input_device(c,function(g)if not xLib.is_song_available()then return end;self:input_midi(g,c)end,function(h)if not xLib.is_song_available()then return end;self:input_sysex(h,c)end)self.midi_inputs_observable=cObservable.list_add(self.midi_inputs_observable,c)else LOG("*** Could not create MIDI input device "..c)end end;function xMidiIO:input_midi(g,c)TRACE("xMidiIO:input_midi(midi_msg,port_name)",g,c)assert(type(g),"table","Expected midi_msg to be a table")assert(type(c),"string","Expected port_name to be a string")self.interpretor:input(g,c)end;function xMidiIO:input_sysex(h,c)TRACE("xMidiIO:input_sysex(sysex_msg,port_name)")assert(type(h),"table","Expected sysex_msg to be a table")assert(type(c),"string","Expected port_name to be a string")self:match_message(xMidiMessage{message_type=xMidiMessage.TYPE.SYSEX,values=h,port_name=c})end;function xMidiIO:close_midi_input(c)TRACE("xMidiIO:close_midi_input(port_name)")assert(type(c),"string","Expected port_name to be a string")local i=self._midi_input_ports[c]if i and i.is_open then i:close()end;self._midi_input_ports[c]=nil;self.midi_inputs_observable=cObservable.list_remove(self.midi_inputs_observable,c)end;function xMidiIO:open_midi_output(c)TRACE("xMidiIO:open_midi_output(port_name)")assert(type(c),"string","Expected port_name to be a string")local j=renoise.Midi.available_output_devices()if table.find(j,c)then self._midi_output_ports[c]=renoise.Midi.create_output_device(c)else LOG("*** Could not create MIDI output device "..c)end end;function xMidiIO:close_midi_output(c)TRACE("xMidiIO:close_midi_output(port_name)")assert(type(c),"string","Expected port_name to be a string")local k=self._midi_output_ports[c]if k and k.is_open then k:close()end;self._midi_output_ports[c]=nil;self.midi_outputs_observable=cObservable.list_remove(self.midi_outputs_observable,c)end;function xMidiIO:initialize_midi_devices()TRACE("xMidiIO:initialize_midi_devices()")for l,v in ipairs(self._midi_input_ports)do self:close_midi_input(l)end;for l,v in ipairs(self._midi_output_ports)do self:close_midi_output(l)end;for l=1,#self.midi_inputs_observable do local c=self.midi_inputs_observable[l].value;self:open_midi_input(c)end;for l=1,#self.midi_outputs_observable do local c=self.midi_outputs_observable[l].value;self:open_midi_output(v.value)end end;function xMidiIO:available_device_ports_changed()TRACE("xMidiIO:available_device_ports_changed()")for l=1,#self.midi_inputs do local c=self.midi_inputs[l].value;self:open_midi_input(c)end;for l=1,#self.midi_outputs do local c=self.midi_outputs[l].value;self:open_midi_output(c)end;self.device_ports_changed_observable:bang()end;function xMidiIO:get_midi_inputs()return self.midi_inputs_observable end;function xMidiIO:set_midi_inputs(m)self.midi_inputs_observable=m end;function xMidiIO:get_midi_outputs()return self.midi_outputs_observable end;function xMidiIO:set_midi_outputs(m)self.midi_outputs_observable=m end