class'xOscClient'function xOscClient:__init(...)TRACE("xOscClient:__init(...)")local a=cLib.unpack_args(...)self.osc_host=property(self.get_osc_host,self.set_osc_host)self.osc_host_observable=renoise.Document.ObservableString()self.osc_port=property(self.get_osc_port,self.set_osc_port)self.osc_port_observable=renoise.Document.ObservableNumber()self._test_clock=nil;self._test_new_value=nil;self._test_old_value=nil;self._test_failed_observable=renoise.Document.ObservableBang()self._test_passed_observable=renoise.Document.ObservableBang()self._connection=nil;local b,c=self:create(a.osc_host,a.osc_port)if not b and c then LOG(c)end end;function xOscClient:create(d,e)TRACE("xOscClient:create(osc_host,osc_port)",d,e)if not d and not e then return end;if self._connection then self._connection:close()end;local f,g=renoise.Socket.create_client(d,e,renoise.Socket.PROTOCOL_UDP)if g then self._connection=nil;return false,"*** Warning: xOscClient failed to start the internal OSC client"else self._connection=f;self.osc_host_observable.value=d;self.osc_port_observable.value=e;return true end end;function xOscClient:trigger_instrument(h,i,j,k,l)TRACE("xOscClient:trigger_instrument(note_on,instr,track,note,velocity)",h,i,j,k,l)if not self._connection then LOG("*** xOscClient: can't trigger notes without a connection")return false end;local m=table.create()m:insert({tag="i",value=i})m:insert({tag="i",value=j})m:insert({tag="i",value=k})local n=nil;if h then n="/renoise/trigger/note_on"m:insert({tag="i",value=l})else n="/renoise/trigger/note_off"end;local o=renoise.Osc.Message(n,m)self._connection:send(o)return true end;function xOscClient:trigger_midi(p)TRACE("xOscClient:trigger_midi(t)",p)if not self._connection then LOG("*** xOscClient: can't trigger MIDI without a connection")return false end;local n="/renoise/trigger/midi"local q=math.floor(p[1])+math.floor(p[2])*256+math.floor(p[3])*65536;local m=table.create()m:insert({tag="i",value=q})local o=renoise.Osc.Message(n,m)self._connection:send(o)return true end;function xOscClient:trigger_auto(r)TRACE("xOscClient:trigger_auto(xmsg)",r)local s=r.message_type==xMidiMessage.TYPE.NOTE_ON;local t=r.message_type==xMidiMessage.TYPE.NOTE_OFF;if s or t then local u=r.instrument_index or rns.selected_instrument_index;local v=r.track_index or rns.selected_track_index;return self:trigger_instrument(s,u,v,r.values[1],r.values[2])else if type(r)~="xMidiMessage"then local w=r.__def;w.message_type=r.message_type;w.channel=r.channel;w.bit_depth=r.bit_depth;w.port_name=r.port_name;r=xMidiMessage(w)end;return self:trigger_raw(r)end end;function xOscClient:trigger_raw(r)TRACE("xOscClient:trigger_raw(xmsg)",r)assert(type(r)=="xMidiMessage","Expected xMidiMessage as argument")if r.message_type==xMidiMessage.TYPE.SYSEX then local c="*** Warning: the internal OSC server does not support sysex messages"return false,c end;local x=r:create_raw_message()for y,z in ipairs(x)do self:trigger_midi(z)end;return true end;function xOscClient:get_osc_host()return self.osc_host_observable.value end;function xOscClient:set_osc_host(q)TRACE("xOscClient:set_osc_port(val)",q)self.osc_host_observable.value=q;local b,c=self:create(q,self.osc_port_observable.value)if not b and c then LOG(c)end end;function xOscClient:get_osc_port()return self.osc_port_observable.value end;function xOscClient:set_osc_port(q)TRACE("xOscClient:set_osc_port(val)",q)if q>xLib.MAX_OSC_PORT or q<xLib.MIN_OSC_PORT then local A="Cannot set to a port number outside this range: %d-%d"error(A:format(xLib.MAX_OSC_PORT,xLib.MIN_OSC_PORT))end;self.osc_port_observable.value=q;local b,c=self:create(self.osc_host_observable.value,q)if not b and c then LOG(c)end end;function xOscClient:_detect_server()TRACE("xOscClient:_detect_server()")if not self._connection then LOG("*** xOscClient: can't detect server, no connection was established")return false end;renoise.tool().app_idle_observable:add_notifier(self,xOscClient._test_idle_notifier)self._test_clock=os.clock()self._test_old_value=renoise.app().active_clipboard_index;self._test_new_value=1+self._test_old_value%4;self._connection:send(renoise.Osc.Message("/renoise/evaluate",{{tag="s",value="renoise.app().active_clipboard_index = "..self._test_new_value}}))end;function xOscClient:_test_idle_notifier()local B=function()local C=renoise.tool().app_idle_observable;if C:has_notifier(self,xOscClient._test_idle_notifier)then C:remove_notifier(self,xOscClient._test_idle_notifier)end;renoise.app().active_clipboard_index=self._test_old_value end;local D=os.clock()-self._test_clock;if D>1 then B()self._test_failed_observable:bang()else local E=renoise.app().active_clipboard_index;if E==self._test_new_value then local A="xOscClient: Renoise OSC server was found at %s:%d"LOG(A:format(self._connection.peer_address,self._connection.peer_port))B()self._test_passed_observable:bang()end end end