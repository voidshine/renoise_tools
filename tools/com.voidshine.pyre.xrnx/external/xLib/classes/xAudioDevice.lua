cLib.require(_xlibroot.."xParameterAutomation")class'xAudioDevice'xAudioDevice.BYPASS_INCAPABLE={"Audio/Effects/Native/TrackVolPan","Audio/Effects/Native/MasterTrackVolPan","Audio/Effects/Native/SendTrackVolPan"}function xAudioDevice.get_param_index(a,b)TRACE("xAudioDevice.get_param_index(device,param)",a,b)assert(type(a)=="AudioDevice")for c,d in ipairs(a.parameters)do if rawequal(d,b)then return c end end end;function xAudioDevice.resolve_device(a,e)TRACE("xAudioDevice.resolve_device(device,track_idx)",a,e)assert(type(a)=="AudioDevice")local f=function(g)for c,d in ipairs(g.devices)do if rawequal(d,a)then return c end end end;if e then local g=rns.tracks[e]if g then return f(g)end else for e,g in ipairs(rns.tracks)do return f(g)end end end;function xAudioDevice.resolve_parameter(b,e,h)TRACE("xAudioDevice.resolve_parameter(param,track_idx,device_idx)",b,e,h)assert(type(b)=="DeviceParameter")local i=function(a,h,e)TRACE("xAudioDevice.resolve_parameter:search_device(device,device_idx,track_idx)",a,h,e)local j=xAudioDevice.get_param_index(a,b)if j then return j,h,e end end;local f=function(g,h,e)TRACE("xAudioDevice.resolve_parameter:search_track(track,device_idx,track_idx)",g,h,e)if h then local a=g.devices[h]if a then return i(a,h,e)end else for k,a in ipairs(g.devices)do local l=i(a,h,e)if l then return l,h,e end end end end;if e and h then local g=rns.tracks[e]if g then local a=g.devices[h]if a then return i()end end elseif e then local g=rns.tracks[e]if g then return f(g,h,e)end else for e,g in ipairs(rns.tracks)do local l=f(g,h,e)if l then return l,h,e end end end end;function xAudioDevice.get_device_routings(a)TRACE("xAudioDevice.get_device_routings(device)",a)assert(type(a)=="AudioDevice")local m={}for c,b in ipairs(a.parameters)do if b.name:match("Out%d Track")or b.name:match("Receiver %d")or b.name=="Dest. Track"or b.name=="Receiver"then if b.value~=0 then m[b.value+1]=true end end end;return m end;function xAudioDevice.is_send_device(a)TRACE("xAudioDevice.is_send_device(device)",a)assert(type(a)=="AudioDevice")local n={"#Send","#Multiband Send"}return table.find(n,a.name)end;function xAudioDevice.get_mixer_parameters(a)TRACE("xAudioDevice.get_mixer_parameters(device)",a)assert(type(a)=="AudioDevice")local o={}for c,d in ipairs(a.parameters)do if d.show_in_mixer then table.insert(o,d)end end;return o end;function xAudioDevice.is_automated(a)TRACE("xAudioDevice.is_automated(device)",a)assert(type(a)=="AudioDevice")for c,d in ipairs(a.parameters)do if d.is_automated then return true end end;return false end;function xAudioDevice.get_parameter_by_name(a,p)TRACE("xAudioDevice.get_parameter_by_name(device,param_name)",a,p)assert(type(a)=="AudioDevice")assert(type(p)=="string")for c,d in ipairs(a.parameters)do if d.name==p then return d,c end end end;function xAudioDevice.copy_automation(e,h,q,r)TRACE("xAudioDevice.copy_automation(track_idx,device_idx,seq_range)",e,h,q)local s=rns.tracks[e]assert(s)local t=s.devices[h]assert(type(t)=="AudioDevice")if not q then q=xSequencerSelection.get_entire_range()end;local o=xAudioDeviceAutomation()o.device_path=t.device_path;local u=xLib.YIELD_AT.NONE;if r~=xLib.YIELD_AT.PARAMETER then u=r end;for c,b in ipairs(t.parameters)do if b.is_automatable then local v=xParameterAutomation.copy(b,q,e,h,u)table.insert(o.parameters,{name=b.name,index=c,envelope=v})if r==xLib.YIELD_AT.PARAMETER then coroutine.yield()end end end;return o end;function xAudioDevice.clear_automation(e,a,q)TRACE("xAudioDevice.clear_automation(track_idx,device,seq_range)",e,a,q)assert(type(a)=="AudioDevice")assert(type(e)=="number")assert(type(q)=="table")for c,b in ipairs(a.parameters)do if b.is_automatable then xParameterAutomation.clear(b,q,e)end end end;function xAudioDevice.cut_automation(e,h,q)end;function xAudioDevice.swap_automation(w,x,y,z,q)end;function xAudioDevice.paste_automation(A,e,h,q,B,r)TRACE("xAudioDevice.paste_automation(device_auto,track_idx,device_idx,seq_range,apply_mode,yield_at)",A,e,h,q,B,r)assert(type(A)=="xAudioDeviceAutomation")assert(type(q)=="table")local s=rns.tracks[e]assert(type(s)=="Track")local t=s.devices[h]assert(type(t)=="AudioDevice")if not A:compatible_with_device_path(t)then local C="*** Incompatible device. Please target a device of this type: "return false,C..A.device_path end;if not B then B=xParameterAutomation.APPLY_MODE.REPLACE end;local u=xLib.YIELD_AT.NONE;if r~=xLib.YIELD_AT.PARAMETER then u=r end;for c,D in ipairs(A.parameters)do local E=t.parameters[D.index]if D.envelope then xParameterAutomation.paste(D.envelope,B,E,q,e,u)elseif B==xParameterAutomation.APPLY_MODE.REPLACE then xParameterAutomation.clear(E,q,e)end;if r==xLib.YIELD_AT.PARAMETER then coroutine.yield()end end;return true end