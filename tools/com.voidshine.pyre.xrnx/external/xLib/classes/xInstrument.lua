cLib.require(_clibroot.."cReflection")cLib.require(_xlibroot.."xSampleMapping")cLib.require(_xlibroot.."xScale")class'xInstrument'function xInstrument.set_previous_scale(a)TRACE("xInstrument.set_previous_scale(instr)",a)assert(type(a)=="Instrument","Expected instr to be a renoise.Instrument")local b=a.trigger_options.scale_mode;local c=xScale.get_scale_index_by_name(b)if c>1 then xInstrument.set_scale_by_index(a,c-1)end end;function xInstrument.set_next_scale(a)TRACE("xInstrument.set_next_scale(instr)",a)assert(type(a)=="Instrument","Expected instr to be a renoise.Instrument")local b=a.trigger_options.scale_mode;local c=xScale.get_scale_index_by_name(b)if c<#xScale.SCALES then xInstrument.set_scale_by_index(a,c+1)end end;function xInstrument.set_scale_by_index(a,c)TRACE("xInstrument.set_scale_by_index(instr,scale_idx)",a,c)assert(type(a)=="Instrument","Expected instr to be a renoise.Instrument")assert(type(c)=="number","Expected scale_idx to be a number")local d=xScale.SCALES[c]if d then a.trigger_options.scale_mode=d.name end end;function xInstrument.is_sliced(a)TRACE("xInstrument.is_sliced(instr)",a)if#a.samples>0 then return a.sample_mappings[1][1].read_only end end;function xInstrument.is_keyzone_available(a)TRACE("xInstrument.is_keyzone_available(instr)",a)if#a.phrases==0 then return true end;local e=true;for f,g in ipairs(a.phrases)do if not g.instrument_column_visible then e=false end end;if e then return false end;return true end;function xInstrument.is_triggering_phrase(a)TRACE("xInstrument.is_triggering_phrase(instr)",a)if#a.phrases==0 then return false end;if a.phrase_playback_mode==renoise.Instrument.PHRASES_OFF then return false end;if a.phrase_playback_mode==renoise.Instrument.PHRASES_PLAY_SELECTIVE then return true end;return true end;function xInstrument.get_phrase_playback_enabled(a)TRACE("xInstrument.get_phrase_playback_enabled(instr)",a)if renoise.API_VERSION>4 then return not(a.phrase_playback_mode==renoise.Instrument.PHRASES_OFF)else return a.phrase_playback_enabled end end;function xInstrument.set_phrase_playback_enabled(a,h)TRACE("xInstrument.set_phrase_playback_enabled(instr,bool)",a,h)if renoise.API_VERSION>4 then local i=h and renoise.Instrument.PHRASES_PLAY_KEYMAP or renoise.Instrument.PHRASES_OFF;a.phrase_playback_mode=i else a.phrase_playback_enabled=h end end;function xInstrument.get_num_frames_in_slice(a,j)assert(type(a)=="Instrument")assert(type(j)=="number")if not xInstrument.is_sliced(a)then return nil,"Instrument is not sliced "end;local k=a.samples[1]if j==0 then return k.slice_markers[1]-1 end;if not k.slice_markers[j]then return nil,"Can't retrieve slice marker - out of range"end;local l=k.slice_markers[j]local m=k.slice_markers[j+1]if not m then local n=xSample.get_sample_buffer(k)m=n.number_of_frames+1 end;return m-l end;function xInstrument.get_slice_marker_at_pos(a,o,p)TRACE("xInstrument.get_slice_marker_at_pos(instr,pos,threshold)",a,o,p)assert(type(a)=="Instrument")assert(type(o)=="number")assert(type(p)=="number")if not xInstrument.is_sliced(a)then return nil end;local k=a.samples[1]local q=o+p;local r=o-p;for j=1,#k.slice_markers do local s=k.slice_markers[j]if s<q and s>r then return j,s end end end;function xInstrument.get_slice_marker_before_pos(a,o)TRACE("xInstrument.get_slice_marker_before_pos(instr,pos)",a,o)assert(type(a)=="Instrument")assert(type(o)=="number")if not xInstrument.is_sliced(a)then return nil end;local k=a.samples[1]for j=#k.slice_markers,1,-1 do local s=k.slice_markers[j]if s<o then return j,s end end end;function xInstrument.get_slice_marker_after_pos(a,o)TRACE("xInstrument.get_slice_marker_after_pos(instr,pos)",a,o)assert(type(a)=="Instrument")assert(type(o)=="number")if not xInstrument.is_sliced(a)then return nil end;local k=a.samples[1]for j=1,#k.slice_markers do local s=k.slice_markers[j]if s>o then return j,s end end end;function xInstrument.get_slice_marker_by_sample_idx(a,t)TRACE("xInstrument.get_slice_marker_by_sample_idx(instr,sample_idx)",a,t)assert(type(a)=="Instrument","Expected renoise.Instrument as argument")assert(type(t)=="number","Expected number as argument")if a.samples[1]then return a.samples[1].slice_markers[t-1]end end;function xInstrument.autocapture()TRACE("xInstrument.autocapture()")rns:capture_nearest_instrument_from_pattern()return rns.selected_instrument_index end;function xInstrument.get_first_available()TRACE("xInstrument.get_first_available()")for f,g in ipairs(rns.instruments)do if xInstrument.is_empty(g)and g.name==""then return f end end end;function xInstrument.get_selected_phrase_index(u)TRACE("xInstrument.get_selected_phrase_index(instr_idx)",u)local v=nil;if#rns.instruments>=u then local w=rns.selected_instrument_index;rns.selected_instrument_index=u;v=rns.selected_phrase_index;rns.selected_instrument_index=w end;return v end;function xInstrument.resolve_midi_track(a)TRACE("xInstrument.resolve_midi_track(instr)",a)if a.midi_input_properties.assigned_track==0 then return rns.selected_track_index else return a.midi_input_properties.assigned_track end end;function xInstrument.is_empty(a)TRACE("xInstrument.is_empty(instr)",a)local x=true;if#a.samples>0 and#a.phrases>0 and#a.sample_device_chains>0 and#a.sample_modulation_sets>0 and not a.plugin_properties.plugin_loaded then x=false end;return x end;function xInstrument.reset_sampler()error("Not implemented")end;function xInstrument.insert_sample(a,t,y,z,A,B)TRACE("xInstrument.insert_sample()",a,t,y,z,A,B)assert(type(a)=="Instrument")assert(type(t)=="number")local C=xSampleBuffer.get_default_properties()y=y or C.sample_rate;z=z or C.bit_depth;A=A or C.number_of_channels;B=B or C.number_of_frames;t=t or rns.selected_sample_index;t=1+cLib.clamp_value(t,1,#a.samples)a:insert_sample_at(t)local k=a.samples[t]if not k then error("Expected a new sample")end;local n=k.sample_buffer;n:create_sample_data(y,z,A,B)return t end;function xInstrument.clone_sample(a,t,D)TRACE("xInstrument.clone_sample(instr,sample_idx,args)",a,t,D)assert(type(a)=="Instrument")assert(type(t)=="number")local k=a.samples[t]if not k then error("Expected a sample")end;local n=xSample.get_sample_buffer(k)if not n then error("Expected a sample-buffer containing data")end;local y=D.sample_rate or n.sample_rate;local z=D.bit_depth or n.bit_depth;local A=D.num_channels or n.number_of_channels;local B=D.num_frames or n.number_of_frames;local E=D.dest_sample_idx and D.dest_sample_idx or t+1;a:insert_sample_at(E)local F=a.samples[E]if not F then error("Expected a new sample")end;local G=not xSampleMapping.has_full_note_range(F.sample_mapping)cReflection.copy_object_properties(k,F)local H=F.sample_buffer;H:create_sample_data(y,z,A,B)return E,G end