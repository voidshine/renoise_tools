import { MIDI } from './common';
import { Midi, MidiHandler, } from './midi';
import { osc_renoise_connect, } from './osc_renoise';
import { GeneratedMidiSpec } from './options';

// Handles and routes any MIDI data generated by playing with the Fire (not MIDI data to/from the Fire itself).
export class GeneratedMidi implements MidiHandler {
    midi: Midi;

    constructor() {
        this.midi = new Midi(this);
    }

    send_note_on(note: number, velocity: number) {
        osc_renoise_send_note_on(note, velocity);
        this.midi.send([ MIDI.NOTE_ON, note, velocity, ]);
    }

    send_note_off(note: number) {
        osc_renoise_send_note_off(note);
        this.midi.send([ MIDI.NOTE_OFF, note, 0, ]);
    }

    // TODO: support OSC /renoise/trigger/midi(number) which encodes MIDI event as number (24-bit...endianness?)
    send_midi(message: MidiMessage) {
        this.midi.send(message);
    }

    on_config_changed(generated_midi_config: GeneratedMidiSpec) {
        osc_renoise_connect(generated_midi_config);
        this.midi.connect(null, generated_midi_config.midi_output);
    }

    on_midi_connection_changed(connected: boolean) {
        rprint(`GeneratedMidi connected: ${connected ? "yes" : "no"}`);
    }

    on_midi_in(message: MidiMessage): void {
        throw new Error("Not used.");
    }
}
